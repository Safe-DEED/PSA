{"version":3,"file":"allows_wasm_web_umd.js","sources":["../src/bin/seal_allows_wasm_web.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/integer-encoder.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/allows_wasm_web_umd.ts","../src/main/seal.ts","../src/implementation/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\n\nvar h;h||(h=typeof Module !== 'undefined' ? Module : {});var aa,ba;h.ready=new Promise(function(a,b){aa=a;ba=b});var ca={},u;for(u in h)h.hasOwnProperty(u)&&(ca[u]=h[u]);var da=\"./this.program\";function ea(a,b){throw b;}var fa=!1,ha=!1;fa=\"object\"===typeof window;ha=\"function\"===typeof importScripts;var w=\"\",ia;\nif(fa||ha)ha?w=self.location.href:document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),0!==w.indexOf(\"blob:\")?w=w.substr(0,w.lastIndexOf(\"/\")+1):w=\"\",ha&&(ia=function(a){try{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}catch(c){if(a=ja(a))return a;throw c;}});var x=h.printErr||console.warn.bind(console);for(u in ca)ca.hasOwnProperty(u)&&(h[u]=ca[u]);ca=null;h.thisProgram&&(da=h.thisProgram);\nh.quit&&(ea=h.quit);var ka;h.wasmBinary&&(ka=h.wasmBinary);var noExitRuntime;h.noExitRuntime&&(noExitRuntime=h.noExitRuntime);\"object\"!==typeof WebAssembly&&y(\"no native wasm support detected\");var A,la,ma=!1,na=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction pa(a,b){var c=B,d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.subarray&&na)return na.decode(c.subarray(a,b));for(d=\"\";a<b;){var e=c[a++];if(e&128){var f=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var l=c[a++]&63;e=224==(e&240)?(e&15)<<12|f<<6|l:(e&7)<<18|f<<12|l<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d}\nfunction qa(a,b,c,d){if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}if(127>=f){if(c>=d)break;b[c++]=f}else{if(2047>=f){if(c+1>=d)break;b[c++]=192|f>>6}else{if(65535>=f){if(c+2>=d)break;b[c++]=224|f>>12}else{if(c+3>=d)break;b[c++]=240|f>>18;b[c++]=128|f>>12&63}b[c++]=128|f>>6&63}b[c++]=128|f&63}}b[c]=0}}\nfunction ra(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var sa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function ta(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&ua[c];)++c;c<<=1;if(32<c-a&&sa)return sa.decode(B.subarray(a,c));c=0;for(d=\"\";;){var e=C[a+2*c>>1];if(0==e||c==b/2)return d;++c;d+=String.fromCharCode(e)}}\nfunction va(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1]=a.charCodeAt(e),b+=2;C[b>>1]=0;return b-d}function wa(a){return 2*a.length}function xa(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}\nfunction ya(a,b,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}D[b>>2]=f;b+=4;if(b+4>c)break}D[b>>2]=0;return b-d}function za(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var E,F,B,C,ua,D,G,Aa,Ba;\nfunction Ca(a){E=a;h.HEAP8=F=new Int8Array(a);h.HEAP16=C=new Int16Array(a);h.HEAP32=D=new Int32Array(a);h.HEAPU8=B=new Uint8Array(a);h.HEAPU16=ua=new Uint16Array(a);h.HEAPU32=G=new Uint32Array(a);h.HEAPF32=Aa=new Float32Array(a);h.HEAPF64=Ba=new Float64Array(a)}var Da=h.INITIAL_MEMORY||16777216;h.wasmMemory?A=h.wasmMemory:A=new WebAssembly.Memory({initial:Da/65536,maximum:32768});A&&(E=A.buffer);Da=E.byteLength;Ca(E);var Ea=[],Fa=[],Ga=[],Ha=[];function Ia(){var a=h.preRun.shift();Ea.unshift(a)}\nvar H=0,Ja=null,Ka=null;h.preloadedImages={};h.preloadedAudios={};function y(a){if(h.onAbort)h.onAbort(a);x(a);ma=!0;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}function La(a,b){return String.prototype.startsWith?a.startsWith(b):0===a.indexOf(b)}var Ma=\"data:application/octet-stream;base64,\",I=\"data:application/octet-stream;base64,\";if(!La(I,Ma)){var Na=I;I=h.locateFile?h.locateFile(Na,w):w+Na}\nfunction Oa(){try{if(ka)return new Uint8Array(ka);var a=ja(I);if(a)return a;if(ia)return ia(I);throw\"both async and sync fetching of the wasm failed\";}catch(b){y(b)}}function Pa(){return ka||!fa&&!ha||\"function\"!==typeof fetch||La(I,\"file://\")?Promise.resolve().then(Oa):fetch(I,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+I+\"'\";return a.arrayBuffer()}).catch(function(){return Oa()})}\nfunction Qa(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(h);else{var c=b.Ga;\"number\"===typeof c?void 0===b.xa?la.get(c)():la.get(c)(b.xa):c(void 0===b.xa?null:b.xa)}}}function Ra(a){this.ba=a-16;this.Ua=function(b){D[this.ba+8>>2]=b};this.Ra=function(b){D[this.ba+0>>2]=b};this.Sa=function(){D[this.ba+4>>2]=0};this.Qa=function(){F[this.ba+12>>0]=0};this.Ta=function(){F[this.ba+13>>0]=0};this.Ka=function(b,c){this.Ua(b);this.Ra(c);this.Sa();this.Qa();this.Ta()}}\nfunction Sa(){return 0<Sa.Da}function Ta(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ua=void 0;function K(a){for(var b=\"\";B[a];)b+=Ua[B[a++]];return b}var L={},M={},Va={};function Wa(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}\nfunction Xa(a,b){a=Wa(a);return(new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}function Ya(a){var b=Error,c=Xa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}\nvar N=void 0;function O(a){throw new N(a);}var Za=void 0;function $a(a){throw new Za(a);}function Q(a,b,c){function d(k){k=c(k);k.length!==a.length&&$a(\"Mismatched type converter count\");for(var m=0;m<a.length;++m)R(a[m],k[m])}a.forEach(function(k){Va[k]=b});var e=Array(b.length),f=[],l=0;b.forEach(function(k,m){M.hasOwnProperty(k)?e[m]=M[k]:(f.push(k),L.hasOwnProperty(k)||(L[k]=[]),L[k].push(function(){e[m]=M[k];++l;l===f.length&&d(e)}))});0===f.length&&d(e)}\nfunction R(a,b,c){c=c||{};if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||O('type \"'+d+'\" must have a positive integer typeid pointer');if(M.hasOwnProperty(a)){if(c.Ja)return;O(\"Cannot register type '\"+d+\"' twice\")}M[a]=b;delete Va[a];L.hasOwnProperty(a)&&(b=L[a],delete L[a],b.forEach(function(e){e()}))}function ab(a){return{count:a.count,na:a.na,pa:a.pa,ba:a.ba,ca:a.ca,fa:a.fa,ga:a.ga}}\nfunction bb(a){O(a.$.ca.aa.name+\" instance already deleted\")}var cb=!1;function db(){}function eb(a){--a.count.value;0===a.count.value&&(a.fa?a.ga.la(a.fa):a.ca.aa.la(a.ba))}\nfunction fb(a){if(\"undefined\"===typeof FinalizationGroup)return fb=function(b){return b},a;cb=new FinalizationGroup(function(b){for(var c=b.next();!c.done;c=b.next())c=c.value,c.ba?eb(c):console.warn(\"object already deleted: \"+c.ba)});fb=function(b){cb.register(b,b.$,b.$);return b};db=function(b){cb.unregister(b.$)};return fb(a)}var gb=void 0,hb=[];function ib(){for(;hb.length;){var a=hb.pop();a.$.na=!1;a[\"delete\"]()}}function S(){}var jb={};\nfunction kb(a,b,c){if(void 0===a[b].da){var d=a[b];a[b]=function(){a[b].da.hasOwnProperty(arguments.length)||O(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+a[b].da+\")!\");return a[b].da[arguments.length].apply(this,arguments)};a[b].da=[];a[b].da[d.ma]=d}}\nfunction lb(a,b,c){h.hasOwnProperty(a)?((void 0===c||void 0!==h[a].da&&void 0!==h[a].da[c])&&O(\"Cannot register public name '\"+a+\"' twice\"),kb(h,a,a),h.hasOwnProperty(c)&&O(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),h[a].da[c]=b):(h[a]=b,void 0!==c&&(h[a].$a=c))}function mb(a,b,c,d,e,f,l,k){this.name=a;this.constructor=b;this.ja=c;this.la=d;this.ha=e;this.Ha=f;this.ra=l;this.Fa=k;this.Na=[]}\nfunction nb(a,b,c){for(;b!==c;)b.ra||O(\"Expected null or instance of \"+c.name+\", got an instance of \"+b.name),a=b.ra(a),b=b.ha;return a}function ob(a,b){if(null===b)return this.ya&&O(\"null is not a valid \"+this.name),0;b.$||O('Cannot pass \"'+T(b)+'\" as a '+this.name);b.$.ba||O(\"Cannot pass deleted object as a pointer of type \"+this.name);return nb(b.$.ba,b.$.ca.aa,this.aa)}\nfunction pb(a,b){if(null===b){this.ya&&O(\"null is not a valid \"+this.name);if(this.ta){var c=this.Oa();null!==a&&a.push(this.la,c);return c}return 0}b.$||O('Cannot pass \"'+T(b)+'\" as a '+this.name);b.$.ba||O(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.sa&&b.$.ca.sa&&O(\"Cannot convert argument of type \"+(b.$.ga?b.$.ga.name:b.$.ca.name)+\" to parameter type \"+this.name);c=nb(b.$.ba,b.$.ca.aa,this.aa);if(this.ta)switch(void 0===b.$.fa&&O(\"Passing raw pointer to smart pointer is illegal\"),\nthis.Va){case 0:b.$.ga===this?c=b.$.fa:O(\"Cannot convert argument of type \"+(b.$.ga?b.$.ga.name:b.$.ca.name)+\" to parameter type \"+this.name);break;case 1:c=b.$.fa;break;case 2:if(b.$.ga===this)c=b.$.fa;else{var d=b.clone();c=this.Pa(c,U(function(){d[\"delete\"]()}));null!==a&&a.push(this.la,c)}break;default:O(\"Unsupporting sharing policy\")}return c}\nfunction qb(a,b){if(null===b)return this.ya&&O(\"null is not a valid \"+this.name),0;b.$||O('Cannot pass \"'+T(b)+'\" as a '+this.name);b.$.ba||O(\"Cannot pass deleted object as a pointer of type \"+this.name);b.$.ca.sa&&O(\"Cannot convert argument of type \"+b.$.ca.name+\" to parameter type \"+this.name);return nb(b.$.ba,b.$.ca.aa,this.aa)}function rb(a){return this.fromWireType(G[a>>2])}function sb(a,b,c){if(b===c)return a;if(void 0===c.ha)return null;a=sb(a,b,c.ha);return null===a?null:c.Fa(a)}var tb={};\nfunction ub(a,b){for(void 0===b&&O(\"ptr should not be undefined\");a.ha;)b=a.ra(b),a=a.ha;return tb[b]}function vb(a,b){b.ca&&b.ba||$a(\"makeClassHandle requires ptr and ptrType\");!!b.ga!==!!b.fa&&$a(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return fb(Object.create(a,{$:{value:b}}))}\nfunction V(a,b,c,d,e,f,l,k,m,n,p){this.name=a;this.aa=b;this.ya=c;this.sa=d;this.ta=e;this.Ma=f;this.Va=l;this.Ca=k;this.Oa=m;this.Pa=n;this.la=p;e||void 0!==b.ha?this.toWireType=pb:(this.toWireType=d?ob:qb,this.ia=null)}function wb(a,b,c){h.hasOwnProperty(a)||$a(\"Replacing nonexistant public symbol\");void 0!==h[a].da&&void 0!==c?h[a].da[c]=b:(h[a]=b,h[a].ma=c)}\nfunction xb(a,b){0<=a.indexOf(\"j\")||y(\"Assertion failed: getDynCaller should only be called with i64 sigs\");var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];var e;-1!=a.indexOf(\"j\")?e=c&&c.length?h[\"dynCall_\"+a].apply(null,[b].concat(c)):h[\"dynCall_\"+a].call(null,b):e=la.get(b).apply(null,c);return e}}\nfunction W(a,b){a=K(a);var c=-1!=a.indexOf(\"j\")?xb(a,b):la.get(b);\"function\"!==typeof c&&O(\"unknown function pointer with signature \"+a+\": \"+b);return c}var yb=void 0;function zb(a){a=Ab(a);var b=K(a);X(a);return b}function Y(a,b){function c(f){e[f]||M[f]||(Va[f]?Va[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new yb(a+\": \"+d.map(zb).join([\", \"]));}\nfunction Bb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Xa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}function Cb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}\nfunction Db(a,b,c,d,e){var f=b.length;2>f&&O(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].ia){k=!0;break}var m=\"void\"!==b[0].name,n=\"\",p=\"\";for(c=0;c<f-2;++c)n+=(0!==c?\", \":\"\")+\"arg\"+c,p+=(0!==c?\", \":\"\")+\"arg\"+c+\"Wired\";a=\"return function \"+Wa(a)+\"(\"+n+\") {\\nif (arguments.length !== \"+(f-2)+\") {\\nthrowBindingError('function \"+a+\" called with ' + arguments.length + ' arguments, expected \"+\n(f-2)+\" args!');\\n}\\n\";k&&(a+=\"var destructors = [];\\n\");var r=k?\"destructors\":\"null\";n=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");d=[O,d,e,Cb,b[0],b[1]];l&&(a+=\"var thisWired = classParam.toWireType(\"+r+\", this);\\n\");for(c=0;c<f-2;++c)a+=\"var arg\"+c+\"Wired = argType\"+c+\".toWireType(\"+r+\", arg\"+c+\"); // \"+b[c+2].name+\"\\n\",n.push(\"argType\"+c),d.push(b[c+2]);l&&(p=\"thisWired\"+(0<p.length?\", \":\"\")+p);a+=(m?\"var rv = \":\"\")+\"invoker(fn\"+(0<p.length?\", \":\"\")+p+\");\\n\";if(k)a+=\n\"runDestructors(destructors);\\n\";else for(c=l?1:2;c<b.length;++c)f=1===c?\"thisWired\":\"arg\"+(c-2)+\"Wired\",null!==b[c].ia&&(a+=f+\"_dtor(\"+f+\"); // \"+b[c].name+\"\\n\",n.push(f+\"_dtor\"),d.push(b[c].ia));m&&(a+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");n.push(a+\"}\\n\");return Bb(n).apply(null,d)}function Eb(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d]);return c}\nfunction Fb(a,b,c){a instanceof Object||O(c+' with invalid \"this\": '+a);a instanceof b.aa.constructor||O(c+' incompatible with \"this\" of type '+a.constructor.name);a.$.ba||O(\"cannot call emscripten binding method \"+c+\" on deleted object\");return nb(a.$.ba,a.$.ca.aa,b.aa)}var Gb=[],Z=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Hb(a){4<a&&0===--Z[a].za&&(Z[a]=void 0,Gb.push(a))}\nfunction U(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Gb.length?Gb.pop():Z.length;Z[b]={za:1,value:a};return b}}function Ib(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?F:B)[d])};case 1:return function(d){return this.fromWireType((c?C:ua)[d>>1])};case 2:return function(d){return this.fromWireType((c?D:G)[d>>2])};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Jb(a,b){var c=M[a];void 0===c&&O(b+\" has unknown type \"+zb(a));return c}function T(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}function Kb(a,b){switch(b){case 2:return function(c){return this.fromWireType(Aa[c>>2])};case 3:return function(c){return this.fromWireType(Ba[c>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Mb(a,b,c){switch(b){case 0:return c?function(d){return F[d]}:function(d){return B[d]};case 1:return c?function(d){return C[d>>1]}:function(d){return ua[d>>1]};case 2:return c?function(d){return D[d>>2]}:function(d){return G[d>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}function Nb(a){a||O(\"Cannot use deleted val. handle = \"+a);return Z[a].value}function Ob(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Jb(D[(b>>2)+d],\"parameter \"+d);return c}var Pb={};\nfunction Qb(a){var b=Pb[a];return void 0===b?K(a):b}var Rb=[];function Sb(a){var b=Rb.length;Rb.push(a);return b}var Tb={};function Ub(){if(!Vb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Tb)a[b]=Tb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Vb=c}return Vb}var Vb;\nfunction Wb(){if(\"object\"===typeof crypto&&\"function\"===typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}return function(){y(\"randomDevice\")}}function Xb(a,b){Xb.Ba||(Xb.Ba=Wb());for(var c=0;c<b;c++)F[a+c>>0]=Xb.Ba();return 0}function Yb(a){return 0===a%4&&(0!==a%100||0===a%400)}function Zb(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}var $b=[31,29,31,30,31,30,31,31,30,31,30,31],ac=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction bc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Yb(a.getFullYear())?$b:ac)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction cc(a,b,c,d){function e(g,q,v){for(g=\"number\"===typeof g?g.toString():g||\"\";g.length<q;)g=v[0]+g;return g}function f(g,q){return e(g,q,\"0\")}function l(g,q){function v(J){return 0>J?-1:0<J?1:0}var z;0===(z=v(g.getFullYear()-q.getFullYear()))&&0===(z=v(g.getMonth()-q.getMonth()))&&(z=v(g.getDate()-q.getDate()));return z}function k(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function m(g){g=bc(new Date(g.ea+1900,0,1),g.wa);var q=new Date(g.getFullYear()+1,0,4),v=k(new Date(g.getFullYear(),0,4));q=k(q);return 0>=l(v,g)?0>=l(q,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var n=D[d+40>>2];d={Ya:D[d>>2],Xa:D[d+4>>2],ua:D[d+8>>2],qa:D[d+12>>2],oa:D[d+16>>2],ea:D[d+20>>2],va:D[d+24>>2],wa:D[d+28>>2],ab:D[d+32>>2],Wa:D[d+\n36>>2],Za:n?n?pa(n,void 0):\"\":\"\"};c=c?pa(c,void 0):\"\";n={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in n)c=c.replace(new RegExp(p,\"g\"),n[p]);var r=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\nt=\"January February March April May June July August September October November December\".split(\" \");n={\"%a\":function(g){return r[g.va].substring(0,3)},\"%A\":function(g){return r[g.va]},\"%b\":function(g){return t[g.oa].substring(0,3)},\"%B\":function(g){return t[g.oa]},\"%C\":function(g){return f((g.ea+1900)/100|0,2)},\"%d\":function(g){return f(g.qa,2)},\"%e\":function(g){return e(g.qa,2,\" \")},\"%g\":function(g){return m(g).toString().substring(2)},\"%G\":function(g){return m(g)},\"%H\":function(g){return f(g.ua,\n2)},\"%I\":function(g){g=g.ua;0==g?g=12:12<g&&(g-=12);return f(g,2)},\"%j\":function(g){return f(g.qa+Zb(Yb(g.ea+1900)?$b:ac,g.oa-1),3)},\"%m\":function(g){return f(g.oa+1,2)},\"%M\":function(g){return f(g.Xa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.ua&&12>g.ua?\"AM\":\"PM\"},\"%S\":function(g){return f(g.Ya,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.va||7},\"%U\":function(g){var q=new Date(g.ea+1900,0,1),v=0===q.getDay()?q:bc(q,7-q.getDay());g=new Date(g.ea+1900,g.oa,g.qa);return 0>\nl(v,g)?f(Math.ceil((31-v.getDate()+(Zb(Yb(g.getFullYear())?$b:ac,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%V\":function(g){var q=new Date(g.ea+1901,0,4),v=k(new Date(g.ea+1900,0,4));q=k(q);var z=bc(new Date(g.ea+1900,0,1),g.wa);return 0>l(z,v)?\"53\":0>=l(q,z)?\"01\":f(Math.ceil((v.getFullYear()<g.ea+1900?g.wa+32-v.getDate():g.wa+1-v.getDate())/7),2)},\"%w\":function(g){return g.va},\"%W\":function(g){var q=new Date(g.ea,0,1),v=1===q.getDay()?q:bc(q,0===q.getDay()?1:7-q.getDay()+1);g=\nnew Date(g.ea+1900,g.oa,g.qa);return 0>l(v,g)?f(Math.ceil((31-v.getDate()+(Zb(Yb(g.getFullYear())?$b:ac,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%y\":function(g){return(g.ea+1900).toString().substring(2)},\"%Y\":function(g){return g.ea+1900},\"%z\":function(g){g=g.Wa;var q=0<=g;g=Math.abs(g)/60;return(q?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.Za},\"%%\":function(){return\"%\"}};for(p in n)0<=c.indexOf(p)&&(c=c.replace(new RegExp(p,\"g\"),n[p](d)));p=\ndc(c);if(p.length>b)return 0;F.set(p,a);return p.length-1}for(var ec=Array(256),fc=0;256>fc;++fc)ec[fc]=String.fromCharCode(fc);Ua=ec;N=h.BindingError=Ya(\"BindingError\");Za=h.InternalError=Ya(\"InternalError\");S.prototype.isAliasOf=function(a){if(!(this instanceof S&&a instanceof S))return!1;var b=this.$.ca.aa,c=this.$.ba,d=a.$.ca.aa;for(a=a.$.ba;b.ha;)c=b.ra(c),b=b.ha;for(;d.ha;)a=d.ra(a),d=d.ha;return b===d&&c===a};\nS.prototype.clone=function(){this.$.ba||bb(this);if(this.$.pa)return this.$.count.value+=1,this;var a=fb(Object.create(Object.getPrototypeOf(this),{$:{value:ab(this.$)}}));a.$.count.value+=1;a.$.na=!1;return a};S.prototype[\"delete\"]=function(){this.$.ba||bb(this);this.$.na&&!this.$.pa&&O(\"Object already scheduled for deletion\");db(this);eb(this.$);this.$.pa||(this.$.fa=void 0,this.$.ba=void 0)};S.prototype.isDeleted=function(){return!this.$.ba};\nS.prototype.deleteLater=function(){this.$.ba||bb(this);this.$.na&&!this.$.pa&&O(\"Object already scheduled for deletion\");hb.push(this);1===hb.length&&gb&&gb(ib);this.$.na=!0;return this};V.prototype.Ia=function(a){this.Ca&&(a=this.Ca(a));return a};V.prototype.Aa=function(a){this.la&&this.la(a)};V.prototype.argPackAdvance=8;V.prototype.readValueFromPointer=rb;V.prototype.deleteObject=function(a){if(null!==a)a[\"delete\"]()};\nV.prototype.fromWireType=function(a){function b(){return this.ta?vb(this.aa.ja,{ca:this.Ma,ba:c,ga:this,fa:a}):vb(this.aa.ja,{ca:this,ba:a})}var c=this.Ia(a);if(!c)return this.Aa(a),null;var d=ub(this.aa,c);if(void 0!==d){if(0===d.$.count.value)return d.$.ba=c,d.$.fa=a,d.clone();d=d.clone();this.Aa(a);return d}d=this.aa.Ha(c);d=jb[d];if(!d)return b.call(this);d=this.sa?d.Ea:d.pointerType;var e=sb(c,this.aa,d.aa);return null===e?b.call(this):this.ta?vb(d.aa.ja,{ca:d,ba:e,ga:this,fa:a}):vb(d.aa.ja,\n{ca:d,ba:e})};h.getInheritedInstanceCount=function(){return Object.keys(tb).length};h.getLiveInheritedInstances=function(){var a=[],b;for(b in tb)tb.hasOwnProperty(b)&&a.push(tb[b]);return a};h.flushPendingDeletes=ib;h.setDelayFunction=function(a){gb=a;hb.length&&gb&&gb(ib)};yb=h.UnboundTypeError=Ya(\"UnboundTypeError\");h.count_emval_handles=function(){for(var a=0,b=5;b<Z.length;++b)void 0!==Z[b]&&++a;return a};h.get_first_emval=function(){for(var a=5;a<Z.length;++a)if(void 0!==Z[a])return Z[a];return null};\nfunction dc(a){var b=Array(ra(a)+1);qa(a,b,0,b.length);return b}\nvar gc=\"function\"===typeof atob?atob:function(a){var b=\"\",c=0;a=a.replace(/[^A-Za-z0-9\\+\\/=]/g,\"\");do{var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));d=d<<2|e>>4;\ne=(e&15)<<4|f>>2;var k=(f&3)<<6|l;b+=String.fromCharCode(d);64!==f&&(b+=String.fromCharCode(e));64!==l&&(b+=String.fromCharCode(k))}while(c<a.length);return b};function ja(a){if(La(a,Ma)){try{var b=gc(a.slice(Ma.length)),c=new Uint8Array(b.length);for(a=0;a<b.length;++a)c[a]=b.charCodeAt(a)}catch(d){throw Error(\"Converting base64 string to bytes failed.\");}return c}}Fa.push({Ga:function(){hc()}});\nvar jc={b:function(a){return ic(a+16)+16},D:function(){},c:function(a,b,c){(new Ra(a)).Ka(b,c);\"uncaught_exception\"in Sa?Sa.Da++:Sa.Da=1;throw a;},M:function(a,b,c,d,e){var f=Ta(c);b=K(b);R(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=F;else if(2===c)k=C;else if(4===c)k=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>f])},ia:null})},f:function(a,b,c,d,\ne,f,l,k,m,n,p,r,t){p=K(p);f=W(e,f);k&&(k=W(l,k));n&&(n=W(m,n));t=W(r,t);var g=Wa(p);lb(g,function(){Y(\"Cannot construct \"+p+\" due to unbound types\",[d])});Q([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.aa;var z=v.ja}else z=S.prototype;q=Xa(g,function(){if(Object.getPrototypeOf(this)!==J)throw new N(\"Use 'new' to construct \"+p);if(void 0===P.ka)throw new N(p+\" has no accessible constructor\");var Lb=P.ka[arguments.length];if(void 0===Lb)throw new N(\"Tried to invoke ctor of \"+p+\" with invalid number of parameters (\"+\narguments.length+\") - expected (\"+Object.keys(P.ka).toString()+\") parameters instead!\");return Lb.apply(this,arguments)});var J=Object.create(z,{constructor:{value:q}});q.prototype=J;var P=new mb(p,q,J,t,v,f,k,n);v=new V(p,P,!0,!1,!1);z=new V(p+\"*\",P,!1,!1,!1);var oa=new V(p+\" const*\",P,!1,!0,!1);jb[a]={pointerType:z,Ea:oa};wb(g,q);return[v,z,oa]})},t:function(a,b,c,d,e,f,l){var k=Eb(c,d);b=K(b);f=W(e,f);Q([],[a],function(m){function n(){Y(\"Cannot call \"+p+\" due to unbound types\",k)}m=m[0];var p=\nm.name+\".\"+b,r=m.aa.constructor;void 0===r[b]?(n.ma=c-1,r[b]=n):(kb(r,b,p),r[b].da[c-1]=n);Q([],k,function(t){t=Db(p,[t[0],null].concat(t.slice(1)),null,f,l);void 0===r[b].da?(t.ma=c-1,r[b]=t):r[b].da[c-1]=t;return[]});return[]})},B:function(a,b,c,d,e,f,l,k){b=K(b);f=W(e,f);Q([],[a],function(m){m=m[0];var n=m.name+\".\"+b,p={get:function(){Y(\"Cannot access \"+n+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};k?p.set=function(){Y(\"Cannot access \"+n+\" due to unbound types\",[c])}:p.set=function(){O(n+\n\" is a read-only property\")};Object.defineProperty(m.aa.constructor,b,p);Q([],[c],function(r){r=r[0];var t={get:function(){return r.fromWireType(f(d))},enumerable:!0};k&&(k=W(l,k),t.set=function(g){var q=[];k(d,r.toWireType(q,g));Cb(q)});Object.defineProperty(m.aa.constructor,b,t);return[]});return[]})},g:function(a,b,c,d,e,f){0<b||y(\"Assertion failed: undefined\");var l=Eb(b,c);e=W(d,e);var k=[f],m=[];Q([],[a],function(n){n=n[0];var p=\"constructor \"+n.name;void 0===n.aa.ka&&(n.aa.ka=[]);if(void 0!==\nn.aa.ka[b-1])throw new N(\"Cannot register multiple constructors with identical number of parameters (\"+(b-1)+\") for class '\"+n.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");n.aa.ka[b-1]=function(){Y(\"Cannot construct \"+n.name+\" due to unbound types\",l)};Q([],l,function(r){n.aa.ka[b-1]=function(){arguments.length!==b-1&&O(p+\" called with \"+arguments.length+\" arguments, expected \"+(b-1));m.length=0;k.length=b;for(var t=1;t<b;++t)k[t]=r[t].toWireType(m,\narguments[t-1]);t=e.apply(null,k);Cb(m);return r[0].fromWireType(t)};return[]});return[]})},d:function(a,b,c,d,e,f,l,k){var m=Eb(c,d);b=K(b);f=W(e,f);Q([],[a],function(n){function p(){Y(\"Cannot call \"+r+\" due to unbound types\",m)}n=n[0];var r=n.name+\".\"+b;k&&n.aa.Na.push(b);var t=n.aa.ja,g=t[b];void 0===g||void 0===g.da&&g.className!==n.name&&g.ma===c-2?(p.ma=c-2,p.className=n.name,t[b]=p):(kb(t,b,r),t[b].da[c-2]=p);Q([],m,function(q){q=Db(r,q,n,f,l);void 0===t[b].da?(q.ma=c-2,t[b]=q):t[b].da[c-2]=\nq;return[]});return[]})},v:function(a,b,c,d,e,f,l,k,m,n){b=K(b);e=W(d,e);Q([],[a],function(p){p=p[0];var r=p.name+\".\"+b,t={get:function(){Y(\"Cannot access \"+r+\" due to unbound types\",[c,l])},enumerable:!0,configurable:!0};m?t.set=function(){Y(\"Cannot access \"+r+\" due to unbound types\",[c,l])}:t.set=function(){O(r+\" is a read-only property\")};Object.defineProperty(p.aa.ja,b,t);Q([],m?[c,l]:[c],function(g){var q=g[0],v={get:function(){var J=Fb(this,p,r+\" getter\");return q.fromWireType(e(f,J))},enumerable:!0};\nif(m){m=W(k,m);var z=g[1];v.set=function(J){var P=Fb(this,p,r+\" setter\"),oa=[];m(n,P,z.toWireType(oa,J));Cb(oa)}}Object.defineProperty(p.aa.ja,b,v);return[]});return[]})},E:function(a,b){b=K(b);R(a,{name:b,fromWireType:function(c){var d=Z[c].value;Hb(c);return d},toWireType:function(c,d){return U(d)},argPackAdvance:8,readValueFromPointer:rb,ia:null})},x:function(a,b,c,d){function e(){}c=Ta(c);b=K(b);e.values={};R(a,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},\ntoWireType:function(f,l){return l.value},argPackAdvance:8,readValueFromPointer:Ib(b,c,d),ia:null});lb(b,e)},s:function(a,b,c){var d=Jb(a,\"enum\");b=K(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Xa(d.name+\"_\"+b,function(){})}});a.values[c]=d;a[b]=d},A:function(a,b,c){c=Ta(c);b=K(b);R(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){if(\"number\"!==typeof e&&\"boolean\"!==typeof e)throw new TypeError('Cannot convert \"'+T(e)+'\" to '+\nthis.name);return e},argPackAdvance:8,readValueFromPointer:Kb(b,c),ia:null})},p:function(a,b,c,d,e,f){var l=Eb(b,c);a=K(a);e=W(d,e);lb(a,function(){Y(\"Cannot call \"+a+\" due to unbound types\",l)},b-1);Q([],l,function(k){wb(a,Db(a,[k[0],null].concat(k.slice(1)),null,e,f),b-1);return[]})},r:function(a,b,c,d,e){function f(n){return n}b=K(b);-1===e&&(e=4294967295);var l=Ta(c);if(0===d){var k=32-8*c;f=function(n){return n<<k>>>k}}var m=-1!=b.indexOf(\"unsigned\");R(a,{name:b,fromWireType:f,toWireType:function(n,\np){if(\"number\"!==typeof p&&\"boolean\"!==typeof p)throw new TypeError('Cannot convert \"'+T(p)+'\" to '+this.name);if(p<d||p>e)throw new TypeError('Passing a number \"'+T(p)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+e+\"]!\");return m?p>>>0:p|0},argPackAdvance:8,readValueFromPointer:Mb(b,l,0!==d),ia:null})},q:function(a,b,c){function d(f){f>>=2;var l=G;return new e(E,l[f+1],l[f])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,\nUint32Array,Float32Array,Float64Array][b];c=K(c);R(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Ja:!0})},G:function(a,b,c,d,e,f,l,k,m,n,p,r){c=K(c);f=W(e,f);k=W(l,k);n=W(m,n);r=W(p,r);Q([a],[b],function(t){t=t[0];return[new V(c,t.aa,!1,!1,!0,t,d,f,k,n,r)]})},C:function(a,b){b=K(b);var c=\"std::string\"===b;R(a,{name:b,fromWireType:function(d){var e=G[d>>2];if(c)for(var f=d+4,l=0;l<=e;++l){var k=d+4+l;if(l==e||0==B[k]){f=f?pa(f,k-f):\"\";if(void 0===m)var m=f;else m+=String.fromCharCode(0),\nm+=f;f=k+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(B[d+4+l]);m=m.join(\"\")}X(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f=\"string\"===typeof e;f||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||O(\"Cannot pass non-string to std::string\");var l=(c&&f?function(){return ra(e)}:function(){return e.length})(),k=ic(4+l+1);G[k>>2]=l;if(c&&f)qa(e,B,k+4,l+1);else if(f)for(f=0;f<l;++f){var m=e.charCodeAt(f);255<m&&\n(X(k),O(\"String has UTF-16 code units that do not fit in 8 bits\"));B[k+4+f]=m}else for(f=0;f<l;++f)B[k+4+f]=e[f];null!==d&&d.push(X,k);return k},argPackAdvance:8,readValueFromPointer:rb,ia:function(d){X(d)}})},y:function(a,b,c){c=K(c);if(2===b){var d=ta;var e=va;var f=wa;var l=function(){return ua};var k=1}else 4===b&&(d=xa,e=ya,f=za,l=function(){return G},k=2);R(a,{name:c,fromWireType:function(m){for(var n=G[m>>2],p=l(),r,t=m+4,g=0;g<=n;++g){var q=m+4+g*b;if(g==n||0==p[q>>k])t=d(t,q-t),void 0===\nr?r=t:(r+=String.fromCharCode(0),r+=t),t=q+b}X(m);return r},toWireType:function(m,n){\"string\"!==typeof n&&O(\"Cannot pass non-string to C++ string type \"+c);var p=f(n),r=ic(4+p+b);G[r>>2]=p>>k;e(n,r+4,p+b);null!==m&&m.push(X,r);return r},argPackAdvance:8,readValueFromPointer:rb,ia:function(m){X(m)}})},N:function(a,b){b=K(b);R(a,{La:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},j:function(a,b,c){a=Nb(a);b=Jb(b,\"emval::as\");var d=[],e=U(d);D[c>>2]=e;return b.toWireType(d,\na)},F:function(a,b,c,d){a=Nb(a);c=Ob(b,c);for(var e=Array(b),f=0;f<b;++f){var l=c[f];e[f]=l.readValueFromPointer(d);d+=l.argPackAdvance}a=a.apply(void 0,e);return U(a)},o:function(a,b,c,d){a=Rb[a];b=Nb(b);c=Qb(c);a(b,c,null,d)},e:Hb,n:function(a,b){b=Ob(a,b);for(var c=b[0],d=c.name+\"_$\"+b.slice(1).map(function(n){return n.name}).join(\"_\")+\"$\",e=[\"retType\"],f=[c],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),f.push(b[1+k]);d=\"return function \"+Wa(\"methodCaller_\"+d)+\"(handle, name, destructors, args) {\\n\";\nvar m=0;for(k=0;k<a-1;++k)d+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(m?\"+\"+m:\"\")+\");\\n\",m+=b[k+1].argPackAdvance;d+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)b[k+1].deleteObject&&(d+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");c.La||(d+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(d+\"};\\n\");a=Bb(e).apply(null,f);return Sb(a)},k:function(a,b){a=Nb(a);b=Nb(b);return U(a[b])},l:function(a){4<a&&(Z[a].za+=1)},w:function(){return U([])},m:function(a){return U(Qb(a))},\ni:function(a){Cb(Z[a].value);Hb(a)},h:function(a,b){a=Jb(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return U(a)},z:function(){y()},L:function(a,b,c){B.copyWithin(a,b,b+c)},u:function(a){a>>>=0;var b=B.length;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(16777216,a,d);0<d%65536&&(d+=65536-d%65536);a:{try{A.grow(Math.min(2147483648,d)-E.byteLength+65535>>>16);Ca(A.buffer);var e=1;break a}catch(f){}e=void 0}if(e)return!0}return!1},J:function(a,\nb){var c=0;Ub().forEach(function(d,e){var f=b+c;e=D[a+4*e>>2]=f;for(f=0;f<d.length;++f)F[e++>>0]=d.charCodeAt(f);F[e>>0]=0;c+=d.length+1});return 0},K:function(a,b){var c=Ub();D[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});D[b>>2]=d;return 0},H:Xb,a:A,I:function(a,b,c,d){return cc(a,b,c,d)}};\n(function(){function a(e){h.asm=e.exports;la=h.asm.O;H--;h.monitorRunDependencies&&h.monitorRunDependencies(H);0==H&&(null!==Ja&&(clearInterval(Ja),Ja=null),Ka&&(e=Ka,Ka=null,e()))}function b(e){a(e.instance)}function c(e){return Pa().then(function(f){return WebAssembly.instantiate(f,d)}).then(e,function(f){x(\"failed to asynchronously prepare wasm: \"+f);y(f)})}var d={a:jc};H++;h.monitorRunDependencies&&h.monitorRunDependencies(H);if(h.instantiateWasm)try{return h.instantiateWasm(d,a)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+\ne),!1}(function(){if(ka||\"function\"!==typeof WebAssembly.instantiateStreaming||La(I,Ma)||La(I,\"file://\")||\"function\"!==typeof fetch)return c(b);fetch(I,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(f){x(\"wasm streaming compile failed: \"+f);x(\"falling back to ArrayBuffer instantiation\");return c(b)})})})();return{}})();var hc=h.___wasm_call_ctors=function(){return(hc=h.___wasm_call_ctors=h.asm.P).apply(null,arguments)};\nh._main=function(){return(h._main=h.asm.Q).apply(null,arguments)};var Ab=h.___getTypeName=function(){return(Ab=h.___getTypeName=h.asm.R).apply(null,arguments)};h.___embind_register_native_and_builtin_types=function(){return(h.___embind_register_native_and_builtin_types=h.asm.S).apply(null,arguments)};var ic=h._malloc=function(){return(ic=h._malloc=h.asm.T).apply(null,arguments)},X=h._free=function(){return(X=h._free=h.asm.U).apply(null,arguments)};\nh.dynCall_vij=function(){return(h.dynCall_vij=h.asm.V).apply(null,arguments)};h.dynCall_iiiiiijj=function(){return(h.dynCall_iiiiiijj=h.asm.W).apply(null,arguments)};h.dynCall_iiiiij=function(){return(h.dynCall_iiiiij=h.asm.X).apply(null,arguments)};h.dynCall_iiiiijj=function(){return(h.dynCall_iiiiijj=h.asm.Y).apply(null,arguments)};h.dynCall_viijii=function(){return(h.dynCall_viijii=h.asm.Z).apply(null,arguments)};h.dynCall_viij=function(){return(h.dynCall_viij=h.asm._).apply(null,arguments)};var kc;\nfunction lc(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}Ka=function mc(){kc||nc();kc||(Ka=mc)};\nfunction nc(){function a(){if(!kc&&(kc=!0,h.calledRun=!0,!ma)){Qa(Fa);Qa(Ga);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(oc){var b=h._main;try{var c=b(0,0);if(!noExitRuntime||0!==c){if(!noExitRuntime){if(h.onExit)h.onExit(c);ma=!0}ea(c,new lc(c))}}catch(d){d instanceof lc||(\"unwind\"==d?noExitRuntime=!0:((b=d)&&\"object\"===typeof d&&d.stack&&(b=[d,d.stack]),x(\"exception thrown: \"+b),ea(1,d)))}finally{}}if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)b=\nh.postRun.shift(),Ha.unshift(b);Qa(Ha)}}if(!(0<H)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)Ia();Qa(Ea);0<H||(h.setStatus?(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}h.run=nc;if(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var oc=!0;h.noInitialRun&&(oc=!1);noExitRuntime=!0;nc();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor = (\n  library: Library\n): BatchEncoderDependencies => ({\n  Exception,\n  MemoryPoolHandle,\n  PlainText,\n  Vector\n}: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions => (\n  context\n): BatchEncoder => {\n  const Constructor = library.BatchEncoder\n  let _instance: Instance\n  try {\n    _instance = new Constructor(context.instance)\n  } catch (e) {\n    throw Exception.safe(e)\n  }\n  /**\n   * @implements BatchEncoder\n   */\n\n  /**\n   * @interface BatchEncoder\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name BatchEncoder#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name BatchEncoder#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name BatchEncoder#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n     * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n     * the result in the destination parameter. The input array must have size at most equal\n     * to the degree of the polynomial modulus. The first half of the elements represent the\n     * first row of the matrix, and the second half represent the second row. The numbers\n     * in the matrix can be at most equal to the PlainText modulus for it to represent\n     * a valid PlainText.\n     *\n     * If the destination PlainText overlaps the input values in memory, the behavior of\n     * this function is undefined.\n     *\n     * @function\n     * @name BatchEncoder#encode\n     * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n     * @param {PlainText} [plainText=null] Destination to store the encoded result\n     * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n     * @example\n     * import SEAL from 'node-seal'\n     * const seal = await SEAL()\n     * ...\n     * const batchEncoder = seal.BatchEncoder(context)\n     *\n     * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n     */\n    encode(\n      array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n      plainText?: PlainText\n    ): PlainText | void {\n      try {\n        if (array.constructor === Int32Array) {\n          if (plainText) {\n            _instance.encode(array, plainText.instance, 'INT32')\n            return\n          }\n          const plain = PlainText()\n          _instance.encode(array, plain.instance, 'INT32')\n          return plain\n        }\n\n        if (array.constructor === Uint32Array) {\n          if (plainText) {\n            _instance.encode(array, plainText.instance, 'UINT32')\n            return\n          }\n          const plain = PlainText()\n          _instance.encode(array, plain.instance, 'UINT32')\n          return plain\n        }\n\n        if (array.constructor === BigInt64Array) {\n          // When embind supports BigInt64Arrays we can remove this hack\n          const stringArray = array.toString().split(',')\n          if (plainText) {\n            _instance.encode(stringArray, plainText.instance, 'INT64')\n            return\n          }\n          const plain = PlainText()\n          _instance.encode(stringArray, plain.instance, 'INT64')\n          return plain\n        }\n\n        if (array.constructor === BigUint64Array) {\n          // When embind supports BigInt64Arrays we can remove this hack\n          const stringArray = array.toString().split(',')\n          if (plainText) {\n            _instance.encode(stringArray, plainText.instance, 'UINT64')\n            return\n          }\n          const plain = PlainText()\n          _instance.encode(stringArray, plain.instance, 'UINT64')\n          return plain\n        }\n\n        throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n     * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n     * parameter. The input PlainText must have degrees less than the polynomial modulus,\n     * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n     * for the encryption parameters. Dynamic memory allocations in the process are\n     * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name BatchEncoder#decode\n     * @param {PlainText} plainText Data to decode\n     * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n     * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n     * @example\n     * import SEAL from 'node-seal'\n     * const seal = await SEAL()\n     * ...\n     * const batchEncoder = seal.BatchEncoder(context)\n     *\n     * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n     * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n     *\n     * const result = batchEncoder.decode(plainText)\n     * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n     */\n    decode(\n      plainText: PlainText,\n      signed = true,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): Int32Array | Uint32Array {\n      try {\n        if (signed) {\n          const tempVect = Vector()\n          const instance = _instance.decodeInt32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Int32Array')\n          const tempArr = tempVect.toArray() as Int32Array\n          tempVect.delete()\n          return tempArr\n        }\n        const tempVect = Vector()\n        const instance = _instance.decodeUint32(plainText.instance, pool)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint32Array')\n        const tempArr = tempVect.toArray() as Uint32Array\n        tempVect.delete()\n        return tempArr\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Performs the same function as the 32-bit decode, but supports true\n     * 64-bit values encapsulated by a BigInt.\n     *\n     * There's no official support for sending a BigInt64Array/BigUint64Array\n     * from C++ to JS, therefore this function uses string conversion to\n     * marshal data which is noticably slower. Use this function if you\n     * absolutely need to marshal values larger than 32 bits.\n     *\n     * @see {@link BatchEncoder#decode} for more information about decode.\n     * @function\n     * @name BatchEncoder#decodeBigInt\n     * @param {PlainText} plainText Data to decode\n     * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n     * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n     * @example\n     * import SEAL from 'node-seal'\n     * const seal = await SEAL()\n     * ...\n     * const batchEncoder = seal.BatchEncoder(context)\n     *\n     * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n     * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n     *\n     * const result = batchEncoder.decodeBigInt(plainText)\n     * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n     */\n    decodeBigInt(\n      plainText: PlainText,\n      signed = true,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): BigInt64Array | BigUint64Array {\n      try {\n        if (signed) {\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            true,\n            pool\n          )\n          return BigInt64Array.from(instance)\n        }\n        const instance = _instance.decodeBigInt(plainText.instance, false, pool)\n        return BigUint64Array.from(instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * The total number of batching slots available to hold data\n     *\n     * @readonly\n     * @name BatchEncoder#slotCount\n     * @type {number}\n     */\n    get slotCount() {\n      return _instance.slotCount()\n    }\n  }\n}\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor = (library: Library): CipherTextDependencies => ({\n  Exception,\n  ComprModeType,\n  ParmsIdType,\n  MemoryPoolHandle,\n  Vector\n}: CipherTextDependencyOptions): CipherTextConstructorOptions => ({\n  context,\n  parmsId,\n  sizeCapacity,\n  pool = MemoryPoolHandle.global\n} = {}): CipherText => {\n  // Static methods\n  const Constructor = library.Ciphertext\n\n  let _instance = construct({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  })\n\n  function construct({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  }: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }) {\n    try {\n      if (!context && !parmsId && sizeCapacity === undefined) {\n        return new Constructor(pool)\n      } else if (context && !parmsId && sizeCapacity === undefined) {\n        return new Constructor(context.instance, pool)\n      } else if (context && parmsId && sizeCapacity === undefined) {\n        return new Constructor(context.instance, parmsId.instance, pool)\n      } else if (context && parmsId && sizeCapacity !== undefined) {\n        return new Constructor(\n          context.instance,\n          parmsId.instance,\n          sizeCapacity,\n          pool\n        )\n      } else {\n        throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n      }\n    } catch (e) {\n      throw Exception.safe(e)\n    }\n  }\n  /**\n   * @implements CipherText\n   */\n\n  /**\n   * @interface CipherText\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name CipherText#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name CipherText#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name CipherText#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Allocates enough memory to accommodate the backing array of a ciphertext\n     * with given capacity. In addition to the capacity, the allocation size is\n     * determined by the current encryption parameters.\n     *\n     * @function\n     * @name CipherText#reserve\n     * @param {Context} context The SEAL Context\n     * @param {number} capacity The capacity to reserve\n     */\n    reserve(context: Context, capacity: number) {\n      try {\n        return _instance.reserve(context.instance, capacity)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Resizes the CipherText to given size, reallocating if the capacity\n     * of the CipherText is too small.\n     *\n     * This function is mainly intended for internal use and is called\n     * automatically by functions such as Evaluator.multiply and\n     * Evaluator.relinearize. A normal user should never have a reason\n     * to manually resize a CipherText.\n     *\n     * @function\n     * @name CipherText#resize\n     * @param {number} size The new size\n     */\n    resize(size: number) {\n      try {\n        return _instance.resize(size)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Resets the CipherText. This function releases any memory allocated\n     * by the CipherText, returning it to the memory pool. It also sets all\n     * encryption parameter specific size information to zero.\n     *\n     * @function\n     * @name CipherText#release\n     */\n    release() {\n      _instance.release()\n    },\n\n    /**\n     * The number of primes in the coefficient modulus of the\n     * associated encryption parameters. This directly affects the\n     * allocation size of the CipherText.\n     *\n     * @readonly\n     * @name CipherText#coeffModulusSize\n     * @type {number}\n     */\n    get coeffModulusSize() {\n      return _instance.coeffModulusSize()\n    },\n\n    /**\n     * The degree of the polynomial modulus of the associated\n     * encryption parameters. This directly affects the allocation size\n     * of the CipherText.\n     *\n     * @readonly\n     * @name CipherText#polyModulusDegree\n     * @type {number}\n     */\n    get polyModulusDegree() {\n      return _instance.polyModulusDegree()\n    },\n\n    /**\n     * The size of the CipherText.\n     *\n     * @readonly\n     * @name CipherText#size\n     * @type {number}\n     */\n    get size() {\n      return _instance.size()\n    },\n\n    /**\n     * The capacity of the allocation. This means the largest size\n     * of the CipherText that can be stored in the current allocation with\n     * the current encryption parameters.\n     *\n     * @readonly\n     * @name CipherText#sizeCapacity\n     * @type {number}\n     */\n    get sizeCapacity() {\n      return _instance.sizeCapacity()\n    },\n\n    /**\n     * Whether the current CipherText is transparent, i.e. does not require\n     * a secret key to decrypt. In typical security models such transparent\n     * CipherTexts would not be considered to be valid. Starting from the second\n     * polynomial in the current CipherText, this function returns true if all\n     * following coefficients are identically zero. Otherwise, returns false.\n     *\n     * @readonly\n     * @name CipherText#isTransparent\n     * @type {boolean}\n     */\n    get isTransparent() {\n      return _instance.isTransparent()\n    },\n\n    /**\n     * Whether the CipherText is in NTT form.\n     *\n     * @readonly\n     * @name CipherText#isNttForm\n     * @type {boolean}\n     */\n    get isNttForm() {\n      return _instance.isNttForm()\n    },\n\n    /**\n     * The reference to parmsId.\n     * @see {@link EncryptionParameters} for more information about parmsId.\n     *\n     * @readonly\n     * @name CipherText#parmsId\n     * @type {ParmsIdType}\n     */\n    get parmsId() {\n      const parms = ParmsIdType()\n      parms.inject(_instance.parmsId())\n      return parms\n    },\n\n    /**\n     * The reference to the scale. This is only needed when using the\n     * CKKS encryption scheme. The user should have little or no reason to ever\n     * change the scale by hand.\n     *\n     * @readonly\n     * @name CipherText#scale\n     * @type {number}\n     */\n    get scale() {\n      return _instance.scale()\n    },\n\n    /**\n     * Sets the CipherText scale. This is only needed when using the\n     * CKKS encryption scheme. The user should have little or no reason to ever\n     * change the scale by hand.\n     *\n     * @function\n     * @name CipherText#setScale\n     * @param {number} scale The scale to set\n     */\n    setScale(scale: number) {\n      _instance.setScale(scale)\n    },\n\n    /**\n     * The currently used MemoryPoolHandle.\n     *\n     * @readonly\n     * @name CipherText#pool\n     * @type {MemoryPoolHandle}\n     */\n    get pool() {\n      return _instance.pool()\n    },\n\n    /**\n     * Save the CipherText to a base64 string\n     *\n     * @function\n     * @name CipherText#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      return _instance.saveToString(compression)\n    },\n\n    /**\n     * Save the CipherText as a binary Uint8Array\n     *\n     * @function\n     * @name CipherText#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the CipherText in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a CipherText from a base64 string\n     *\n     * @function\n     * @name CipherText#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a CipherText from an Uint8Array holding binary data\n     *\n     * @function\n     * @name CipherText#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing CipherText and overwrite this instance\n     *\n     * @function\n     * @name CipherText#copy\n     * @param {CipherText} cipher CipherText to copy\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encoding some data ...\n     * const cipherTextB = seal.CipherText()\n     * cipherTextB.copy(cipherTextA)\n     * // cipherTextB holds a copy of cipherTextA\n     */\n    copy(cipher: CipherText) {\n      try {\n        _instance.copy(cipher.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this CipherText\n     *\n     * @function\n     * @name CipherText#clone\n     * @returns {CipherText}\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encoding some data ...\n     * const cipherTextB = cipherTextA.clone()\n     * // cipherTextB holds a copy of cipherTextA\n     */\n    clone(): CipherText {\n      try {\n        const clonedInstance = _instance.clone()\n        const cipher = CipherTextConstructor(library)({\n          Exception,\n          ComprModeType,\n          ParmsIdType,\n          MemoryPoolHandle,\n          Vector\n        })()\n        cipher.unsafeInject(clonedInstance)\n        return cipher\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a CipherText into this one and delete the old reference\n     *\n     * @function\n     * @name CipherText#move\n     * @param {CipherText} cipher CipherText to move\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encoding some data ...\n     * const cipherTextB = seal.CipherText()\n     * cipherTextB.move(cipherTextA)\n     * // cipherTextB holds a the instance of cipherTextA.\n     * // cipherTextA no longer holds an instance\n     */\n    move(cipher: CipherText) {\n      try {\n        _instance.move(cipher.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        cipher.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor = (library: Library): CKKSEncoderDependencies => ({\n  Exception,\n  MemoryPoolHandle,\n  PlainText,\n  Vector\n}: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions => (\n  context\n): CKKSEncoder => {\n  const Constructor = library.CKKSEncoder\n  let _instance: Instance\n  try {\n    _instance = new Constructor(context.instance)\n  } catch (e) {\n    throw Exception.safe(e)\n  }\n  /**\n   * @implements CKKSEncoder\n   */\n\n  /**\n   * @interface CKKSEncoder\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name CKKSEncoder#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name CKKSEncoder#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name CKKSEncoder#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Encodes a vector of double-precision floating-point real numbers\n     * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n     * Dynamic memory allocations in the process are allocated from the memory\n     * pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name CKKSEncoder#encode\n     * @param {Float64Array} array Data to encode\n     * @param {number} scale Scaling parameter defining encoding precision\n     * @param {PlainText} [plainText] Destination to store the encoded result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n     * @example\n     * import SEAL from 'node-seal'\n     * const seal = await SEAL()\n     * ...\n     * const ckksEncoder = seal.CKKSEncoder(context)\n     *\n     * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n     */\n    encode(\n      array: Float64Array,\n      scale: number,\n      plainText?: PlainText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): PlainText | void {\n      try {\n        if (array.constructor === Float64Array) {\n          if (plainText) {\n            _instance.encode(array, scale, plainText.instance, pool)\n            return\n          }\n          const plain = PlainText()\n          _instance.encode(array, scale, plain.instance, pool)\n          return plain\n        } else {\n          throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n        }\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Decodes a plaintext polynomial into double-precision floating-point\n     * real numbers. Dynamic memory allocations in the process are\n     * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name CKKSEncoder#decode\n     * @param {PlainText} plainText Data to decode\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {Float64Array} TypedArray containing the decoded data\n     * @example\n     * import SEAL from 'node-seal'\n     * const seal = await SEAL()\n     * ...\n     * const ckksEncoder = seal.CKKSEncoder(context)\n     *\n     * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n     *\n     * const result = ckksEncoder.decode(plainText)\n     */\n    decode(\n      plainText: PlainText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): Float64Array {\n      try {\n        const tempVect = Vector()\n        const instance = _instance.decodeDouble(plainText.instance, pool)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Float64Array')\n        const tempArr = tempVect.toArray() as Float64Array\n        tempVect.delete()\n        return tempArr\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * The total number of CKKS slots available to hold data\n     *\n     * @readonly\n     * @name CKKSEncoder#slotCount\n     * @type {number}\n     */\n    get slotCount() {\n      return _instance.slotCount()\n    }\n  }\n}\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor = (\n  library: Library\n): CoeffModulusDependencies => ({\n  Exception,\n  SecurityLevel,\n  Vector\n}: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions => (): CoeffModulus => {\n  // Static methods\n  const _MaxBitCount = library.CoeffModulus.MaxBitCount\n  const _BFVDefault = library.CoeffModulus.BFVDefault\n  const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n  /**\n   * @implements CoeffModulus\n   */\n\n  /**\n   * @interface CoeffModulus\n   */\n  return {\n    /**\n     * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n     *\n     * @function\n     * @name CoeffModulus.MaxBitCount\n     * @param {number} polyModulusDegree Degree of the polynomial modulus\n     * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n     * @returns {number} Maximum bit count\n     */\n    MaxBitCount(\n      polyModulusDegree: number,\n      securityLevel: SecurityLevel = SecurityLevel.tc128\n    ): number {\n      return _MaxBitCount(polyModulusDegree, securityLevel)\n    },\n\n    /**\n     * Returns a default vector of primes for the BFV CoeffModulus parameter\n     *\n     * @function\n     * @name CoeffModulus.BFVDefault\n     * @param {number} polyModulusDegree Degree of the polynomial modulus\n     * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n     * @returns {Vector} Vector containing Modulus primes\n     */\n    BFVDefault(\n      polyModulusDegree: number,\n      securityLevel: SecurityLevel = SecurityLevel.tc128\n    ): Vector {\n      try {\n        const vectorModulus = Vector()\n        const instance = _BFVDefault(polyModulusDegree, securityLevel)\n        vectorModulus.unsafeInject(instance)\n        vectorModulus.setType('Modulus')\n        return vectorModulus\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Creates a vector of primes for a given polyModulusDegree and bitSizes\n     *\n     * @function\n     * @name CoeffModulus.Create\n     * @param {number} polyModulusDegree Degree of the polynomial modulus\n     * @param {Int32Array} bitSizes Int32Array containing values representing\n     * bit-sizes of primes\n     * @returns {Vector} Vector containing Modulus primes\n     */\n    Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n      try {\n        if (bitSizes.constructor !== Int32Array) {\n          throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n        }\n        const vectorModulus = Vector()\n        const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n        vectorModulus.unsafeInject(instance)\n        vectorModulus.setType('Modulus')\n        return vectorModulus\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly deflate: any\n}\n\nconst ComprModeTypeConstructor = (\n  library: Library\n): ComprModeTypeDependencies => (): ComprModeTypeConstructorOptions => (): ComprModeType => {\n  // Static methods\n  const _none = library.ComprModeType.none\n  const _deflate = library.ComprModeType.deflate\n\n  /**\n   * @implements ComprModeType\n   */\n\n  /**\n   * @interface ComprModeType\n   */\n  return {\n    /**\n     * The `none` Compression Mode Type\n     *\n     * @readonly\n     * @name ComprModeType.none\n     * @type {ComprModeType.none}\n     */\n    get none() {\n      /**\n       * @typedef {ComprModeType.none} ComprModeType.none\n       */\n      return _none\n    },\n\n    /**\n     * The `deflate` Compression Mode Type\n     *\n     * @readonly\n     * @name ComprModeType.deflate\n     * @type {ComprModeType.deflate}\n     */\n    get deflate() {\n      /**\n       * @typedef {ComprModeType.deflate} ComprModeType.deflate\n       */\n      return _deflate\n    }\n  }\n}\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor = (library: Library): ContextDataDependencies => ({\n  Exception,\n  EncryptionParameters,\n  ParmsIdType,\n  EncryptionParameterQualifiers\n}: ContextDataDependencyOptions): ContextDataConstructorOptions => (): ContextData => {\n  let _instance: Instance\n  /**\n   * @implements ContextData\n   */\n\n  /**\n   * @interface ContextData\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name ContextData#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name ContextData#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name ContextData#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Returns a const reference to the underlying encryption parameters.\n     *\n     * @readonly\n     * @name ContextData#parms\n     * @type {EncryptionParameters}\n     */\n    get parms() {\n      const instance = _instance.parms()\n      const encryptionParameters = EncryptionParameters()\n      encryptionParameters.unsafeInject(instance)\n      return encryptionParameters\n    },\n\n    /**\n     * Returns the parmsId of the current parameters.\n     *\n     * @readonly\n     * @name ContextData#parmsId\n     * @type {ParmsIdType}\n     */\n    get parmsId() {\n      const parms = ParmsIdType()\n      parms.inject(_instance.parmsId())\n      return parms\n    },\n\n    /**\n     * Returns a copy of EncryptionParameterQualifiers corresponding to the\n     * current encryption parameters. Note that to change the qualifiers it is\n     * necessary to create a new instance of SEALContext once appropriate changes\n     * to the encryption parameters have been made.\n     *\n     * @readonly\n     * @name ContextData#qualifiers\n     * @type {EncryptionParameterQualifiers}\n     */\n    get qualifiers() {\n      const encParmQualifiers = EncryptionParameterQualifiers()\n      encParmQualifiers.unsafeInject(_instance.qualifiers())\n      return encParmQualifiers\n    },\n\n    /**\n     * Returns the significant bit count of the total coefficient modulus.\n     *\n     * @readonly\n     * @name ContextData#totalCoeffModulusBitCount\n     * @type {number}\n     */\n    get totalCoeffModulusBitCount() {\n      return _instance.totalCoeffModulusBitCount()\n    },\n\n    /**\n     * Returns a shared_ptr to the context data corresponding to the previous parameters\n     * in the modulus switching chain. If the current data is the first one in the\n     * chain, then the result is nullptr.\n     *\n     * @readonly\n     * @name ContextData#prevContextData\n     * @type {ContextData}\n     */\n    get prevContextData() {\n      const cxtData = ContextDataConstructor(library)({\n        Exception,\n        EncryptionParameters,\n        ParmsIdType,\n        EncryptionParameterQualifiers\n      })()\n      cxtData.unsafeInject(_instance.prevContextData())\n      return cxtData\n    },\n\n    /**\n     * Returns a shared_ptr to the context data corresponding to the next parameters\n     * in the modulus switching chain. If the current data is the last one in the\n     * chain, then the result is nullptr.\n     *\n     * @readonly\n     * @name ContextData#nextContextData\n     * @type {ContextData}\n     */\n    get nextContextData() {\n      const cxtData = ContextDataConstructor(library)({\n        Exception,\n        EncryptionParameters,\n        ParmsIdType,\n        EncryptionParameterQualifiers\n      })()\n      cxtData.unsafeInject(_instance.nextContextData())\n      return cxtData\n    },\n\n    /**\n     * Returns the index of the parameter set in a chain. The initial parameters\n     * have index 0 and the index increases sequentially in the parameter chain.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#chainIndex\n     * @type {number}\n     */\n    get chainIndex() {\n      return _instance.chainIndex()\n    }\n  }\n}\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor = (library: Library): ContextDependencies => ({\n  ParmsIdType,\n  ContextData,\n  SecurityLevel\n}: ContextDependencyOptions): ContextConstructorOptions => (\n  encryptionParams,\n  expandModChain = true,\n  securityLevel = SecurityLevel.tc128\n): Context => {\n  // Static methods\n  const Constructor = library.SEALContext\n\n  let _instance = new Constructor(\n    encryptionParams.instance,\n    expandModChain,\n    securityLevel\n  ) as Instance\n\n  /**\n   * @implements Context\n   */\n\n  /**\n   * @interface Context\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Context#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Context#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Context#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Returns the context parameters in a human readable string format.\n     *\n     * @private\n     * @function\n     * @name Context#toString\n     * @returns {string} Context details as a string\n     */\n    toHuman(): string {\n      return _instance.toHuman()\n    },\n\n    /**\n     * Returns the ContextData corresponding to encryption parameters with a given\n     * parmsId. If parameters with the given parmsId are not found then the\n     * function returns nullptr.\n     *\n     * @function\n     * @name Context#getContextData\n     * @param {ParmsIdType} parmsId Specific id to return ContextData for\n     * @returns {ContextData} ContextData corresponding to encryption parameters\n     */\n    getContextData(parmsId: ParmsIdType): ContextData {\n      const instance = _instance.getContextData(parmsId.instance)\n      const contextData = ContextData()\n      contextData.unsafeInject(instance)\n      return contextData\n    },\n\n    /**\n     * The ContextData corresponding to encryption parameters that are used for keys.\n     *\n     * @readonly\n     * @name Context#keyContextData\n     * @type {ContextData}\n     */\n    get keyContextData() {\n      const instance = _instance.keyContextData()\n      const contextData = ContextData()\n      contextData.unsafeInject(instance)\n      return contextData\n    },\n\n    /**\n     * The ContextData corresponding to the first encryption parameters that are used for data.\n     *\n     * @readonly\n     * @name Context#firstContextData\n     * @type {ContextData}\n     */\n    get firstContextData() {\n      const instance = _instance.firstContextData()\n      const contextData = ContextData()\n      contextData.unsafeInject(instance)\n      return contextData\n    },\n\n    /**\n     * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n     *\n     * @readonly\n     * @name Context#lastContextData\n     * @type {ContextData}\n     */\n    get lastContextData() {\n      const instance = _instance.lastContextData()\n      const contextData = ContextData()\n      contextData.unsafeInject(instance)\n      return contextData\n    },\n\n    /**\n     * Whether the encryption parameters are set in a way that is considered valid by\n     * Microsoft SEAL, the variable parameters_set is set to true.\n     *\n     * @function\n     * @name Context#parametersSet\n     * @type {boolean}\n     */\n    parametersSet() {\n      return _instance.parametersSet()\n    },\n\n    /**\n     * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n     *\n     * @readonly\n     * @name Context#keyParmsId\n     * @type {ParmsIdType}\n     */\n    get keyParmsId() {\n      const instance = _instance.keyParmsId()\n      const parmsId = ParmsIdType()\n      parmsId.inject(instance)\n      return parmsId\n    },\n\n    /**\n     * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n     *\n     * @readonly\n     * @name Context#firstParmsId\n     * @type {ParmsIdType}\n     */\n    get firstParmsId() {\n      const instance = _instance.firstParmsId()\n      const parmsId = ParmsIdType()\n      parmsId.inject(instance)\n      return parmsId\n    },\n\n    /**\n     * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n     *\n     * @readonly\n     * @name Context#lastParmsId\n     * @type {ParmsIdType}\n     */\n    get lastParmsId() {\n      const instance = _instance.lastParmsId()\n      const parmsId = ParmsIdType()\n      parmsId.inject(instance)\n      return parmsId\n    },\n\n    /**\n     * Whether the coefficient modulus supports keyswitching. In practice,\n     * support for keyswitching is required by Evaluator.relinearize,\n     * Evaluator.applyGalois, and all rotation and conjugation operations. For\n     * keyswitching to be available, the coefficient modulus parameter must consist\n     * of at least two prime number factors.\n     *\n     * @readonly\n     * @name Context#usingKeyswitching\n     * @type {boolean}\n     */\n    get usingKeyswitching() {\n      return _instance.usingKeyswitching()\n    }\n  }\n}\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor = (library: Library): DecryptorDependencies => ({\n  Exception,\n  PlainText\n}: DecryptorDependencyOptions): DecryptorConstructorOptions => (\n  context,\n  secretKey\n): Decryptor => {\n  const Constructor = library.Decryptor\n  let _instance: Instance\n  try {\n    _instance = new Constructor(context.instance, secretKey.instance)\n  } catch (e) {\n    throw Exception.safe(e)\n  }\n  /**\n   * @implements Decryptor\n   */\n\n  /**\n   * @interface Decryptor\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Decryptor#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Decryptor#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Decryptor#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Decrypts a CipherText and stores the result in the destination parameter.\n     *\n     * @function\n     * @name Decryptor#decrypt\n     * @param {CipherText} cipherText CipherText to decrypt\n     * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n     * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n     * PlainText containng the decrypted result\n     */\n    decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n      try {\n        if (plainText) {\n          _instance.decrypt(cipherText.instance, plainText.instance)\n          return\n        }\n        const plain = PlainText()\n        _instance.decrypt(cipherText.instance, plain.instance)\n        return plain\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n     * noise budget measures the amount of room there is for the noise to grow while\n     * ensuring correct decryptions. This function works only with the BFV scheme.\n     *\n     * @par Invariant Noise Budget\n     * The invariant noise polynomial of a CipherText is a rational coefficient\n     * polynomial, such that a CipherText decrypts correctly as long as the\n     * coefficients of the invariantnoise polynomial are of absolute value less\n     * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n     * the invariant noise, and for correct decryption requireit to be less than\n     * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n     * as -log2(2v). Thus, the invariant noise budget starts from some initial\n     * value, which depends on the encryption parameters, and decreases when\n     * computations are performed. When the budget reaches zero, the CipherText\n     * becomes too noisy to decrypt correctly.\n     *\n     * @function\n     * @name Decryptor#invariantNoiseBudget\n     * @param {CipherText} cipherText CipherText to measure\n     * @returns {number} Invariant noise budget (in bits)\n     */\n    invariantNoiseBudget(cipherText: CipherText): number {\n      try {\n        return _instance.invariantNoiseBudget(cipherText.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor = (\n  library: Library\n): EncryptionParametersDependencies => ({\n  Exception,\n  ComprModeType,\n  Modulus,\n  SchemeType,\n  Vector\n}: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions => (\n  schemeType: SchemeType = SchemeType.none\n): EncryptionParameters => {\n  const Constructor = library.EncryptionParameters\n  let _instance = new Constructor(schemeType)\n\n  /**\n   * @implements EncryptionParameters\n   */\n\n  /**\n   * @interface EncryptionParameters\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name EncryptionParameters#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name EncryptionParameters#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name EncryptionParameters#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Sets the degree of the polynomial modulus parameter to the specified value.\n     * The polynomial modulus directly affects the number of coefficients in\n     * PlainText polynomials, the size of CipherText elements, the computational\n     * performance of the scheme (bigger is worse), and the security level (bigger\n     * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n     * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n     *\n     * @function\n     * @name EncryptionParameters#setPolyModulusDegree\n     * @param {number} polyModulusDegree The degree of the polynomial modulus\n     */\n    setPolyModulusDegree(polyModulusDegree: number) {\n      try {\n        _instance.setPolyModulusDegree(polyModulusDegree)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Sets the coefficient modulus parameter. The coefficient modulus consists\n     * of a list of distinct prime numbers, and is represented by a vector of\n     * Modulus objects. The coefficient modulus directly affects the size\n     * of CipherText elements, the amount of computation that the scheme can perform\n     * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n     * of the prime numbers in the coefficient modulus must be at most 60 bits,\n     * and must be congruent to 1 modulo 2*degree(poly_modulus).\n     *\n     * @function\n     * @name EncryptionParameters#setCoeffModulus\n     * @param {Vector} coeffModulus Vector of Modulus primes\n     */\n    setCoeffModulus(coeffModulus: Vector) {\n      try {\n        _instance.setCoeffModulus(coeffModulus.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n     * modulus represented by the Modulus class. The PlainText modulus\n     * determines the largest coefficient that PlainText polynomials can represent.\n     * It also affects the amount of computation that the scheme can perform\n     * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n     * long, but can otherwise be any integer. Note, however, that some features\n     * (e.g. batching) require the PlainText modulus to be of a particular form.\n     *\n     * @function\n     * @name EncryptionParameters#setPlainModulus\n     * @param {Modulus} plainModulus PlainText modulus parameter\n     */\n    setPlainModulus(plainModulus: Modulus) {\n      try {\n        _instance.setPlainModulus(plainModulus.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * The encryption scheme type.\n     *\n     * @readonly\n     * @name EncryptionParameters#scheme\n     * @type {SchemeType.none|SchemeType.BFV|SchemeType.CKKS}\n     */\n    get scheme() {\n      return _instance.scheme()\n    },\n\n    /**\n     * The degree of the polynomial modulus parameter.\n     *\n     * @readonly\n     * @name EncryptionParameters#polyModulusDegree\n     * @type {number}\n     */\n    get polyModulusDegree() {\n      return _instance.polyModulusDegree()\n    },\n\n    /**\n     * Returns the currently set coefficient modulus parameter.\n     *\n     * @readonly\n     * @name EncryptionParameters#coeffModulus\n     * @type {BigUint64Array}\n     */\n    get coeffModulus() {\n      const tempVect = Vector()\n      const instance = _instance.coeffModulus()\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Modulus')\n      const tempArr = tempVect.toArray() as BigUint64Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Returns the currently set PlainText modulus parameter.\n     *\n     * @readonly\n     * @name EncryptionParameters#plainModulus\n     * @type {Modulus}\n     */\n    get plainModulus() {\n      const instance = _instance.plainModulus()\n      const smallModulus = Modulus(BigInt(0))\n      smallModulus.inject(instance)\n      return smallModulus\n    },\n\n    /**\n     * Save the Encryption Parameters to a base64 string\n     *\n     * @function\n     * @name EncryptionParameters#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      return _instance.saveToString(compression)\n    },\n\n    /**\n     * Save the Encryption Parameters as a binary Uint8Array\n     *\n     * @function\n     * @name EncryptionParameters#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the CipherText in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load the Encryption Parameters from a base64 string\n     *\n     * @function\n     * @name EncryptionParameters#load\n     * @param {string} encoded base64 encoded string\n     */\n    load(encoded: string) {\n      try {\n        _instance.loadFromString(encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load the Encryption Parameters from an Uint8Array holding binary data\n     *\n     * @function\n     * @name EncryptionParameters#loadArray\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(array: Uint8Array) {\n      try {\n        _instance.loadFromArray(array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n}\n\nconst EncryptorConstructor = (library: Library): EncryptorDependencies => ({\n  Exception,\n  MemoryPoolHandle,\n  CipherText,\n  Serializable\n}: EncryptorDependencyOptions): EncryptorConstructorOptions => (\n  context,\n  publicKey,\n  secretKey\n): Encryptor => {\n  const Constructor = library.Encryptor\n  let _instance = constructInstance(context, publicKey, secretKey)\n\n  function constructInstance(\n    context: Context,\n    publicKey: PublicKey,\n    secretKey?: SecretKey\n  ) {\n    try {\n      if (secretKey) {\n        return new Constructor(\n          context.instance,\n          publicKey.instance,\n          secretKey.instance\n        )\n      }\n      return new Constructor(context.instance, publicKey.instance)\n    } catch (e) {\n      throw Exception.safe(e)\n    }\n  }\n  /**\n   * @implements Encryptor\n   */\n\n  /**\n   * @interface Encryptor\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Encryptor#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Encryptor#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Encryptor#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Encrypts a PlainText and stores the result in the destination parameter.\n     * Dynamic memory allocations in the process are allocated from the memory\n     * pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Encryptor#encrypt\n     * @param {PlainText} plainText PlainText to encrypt\n     * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n     * CipherText containing the encrypted result\n     */\n    encrypt(\n      plainText: PlainText,\n      cipherText?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (cipherText) {\n          _instance.encrypt(plainText.instance, cipherText.instance, pool)\n          return\n        }\n        const cipher = CipherText()\n        _instance.encrypt(plainText.instance, cipher.instance, pool)\n        return cipher\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Encrypts a PlainText with the secret key and stores the result in\n     * destination.\n     *\n     * The encryption parameters for the resulting CipherText\n     * correspond to:\n     * 1) in BFV, the highest (data) level in the modulus switching chain,\n     * 2) in CKKS, the encryption parameters of the plaintext.\n     * Dynamic memory allocations in the process are allocated from the memory\n     * pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Encryptor#encryptSymmetric\n     * @param {PlainText} plainText PlainText to encrypt\n     * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n     * CipherText containing the encrypted result\n     */\n    encryptSymmetric(\n      plainText: PlainText,\n      cipherText?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (cipherText) {\n          _instance.encryptSymmetric(\n            plainText.instance,\n            cipherText.instance,\n            pool\n          )\n          return\n        }\n        const cipher = CipherText()\n        _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n        return cipher\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Encrypts a plaintext with the secret key and returns the ciphertext as\n     * a serializable object.\n     *\n     * The encryption parameters for the resulting CipherText\n     * correspond to:\n     * 1) in BFV, the highest (data) level in the modulus switching chain,\n     * 2) in CKKS, the encryption parameters of the plaintext.\n     * Dynamic memory allocations in the process are allocated from the memory\n     * pool pointed to by the given MemoryPoolHandle.\n     *\n     * Half of the ciphertext data is pseudo-randomly generated from a seed to\n     * reduce the object size. The resulting serializable object cannot be used\n     * directly and is meant to be serialized for the size reduction to have an\n     * impact.\n     *\n     * @function\n     * @name Encryptor#encryptSymmetricSerializable\n     * @param {PlainText} plainText PlainText to encrypt\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {Serializable} Returns a Serializable containing the encrypted result\n     */\n    encryptSymmetricSerializable(\n      plainText: PlainText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): Serializable {\n      try {\n        const serialized = Serializable()\n        const instance = _instance.encryptSymmetricSerializable(\n          plainText.instance,\n          pool\n        )\n        serialized.unsafeInject(instance)\n        return serialized\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor = (library: Library): EvaluatorDependencies => ({\n  Exception,\n  MemoryPoolHandle,\n  CipherText,\n  PlainText\n}: EvaluatorDependencyOptions): EvaluatorConstructorOptions => (\n  context\n): Evaluator => {\n  const Constructor = library.Evaluator\n  let _instance: Instance\n  try {\n    _instance = new Constructor(context.instance)\n  } catch (e) {\n    throw Exception.safe(e)\n  }\n  /**\n   * @implements Evaluator\n   */\n\n  /**\n   * @interface Evaluator\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Evaluator#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Evaluator#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Evaluator#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Negates a CipherText and stores the result in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#negate\n     * @param {CipherText} encrypted CipherText to negate\n     * @param {CipherText} [destination] CipherText to store the negated results\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherText = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.negate(cipherText)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.negate(encrypted, cipherDest)\n     */\n    negate(encrypted: CipherText, destination?: CipherText): CipherText | void {\n      try {\n        if (destination) {\n          _instance.negate(encrypted.instance, destination.instance)\n          return\n        }\n        const temp = CipherText()\n        _instance.negate(encrypted.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Adds two CipherTexts. This function adds together a and b\n     * and stores the result in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#add\n     * @param {CipherText} a CipherText operand A\n     * @param {CipherText} b CipherText operand B\n     * @param {CipherText} [destination] CipherText destination to store the sum\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const cipherTextB = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n     */\n    add(\n      a: CipherText,\n      b: CipherText,\n      destination?: CipherText\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.add(a.instance, b.instance, destination.instance)\n          return\n        }\n        const temp = CipherText()\n        _instance.add(a.instance, b.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Subtracts two CipherTexts. This function computes the difference of a\n     * and b and stores the result in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#sub\n     * @param {CipherText} a CipherText operand A\n     * @param {CipherText} b CipherText operand B\n     * @param {CipherText} [destination] CipherText destination to store the difference\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const cipherTextB = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n     */\n    sub(\n      a: CipherText,\n      b: CipherText,\n      destination?: CipherText\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.sub(a.instance, b.instance, destination.instance)\n          return\n        }\n        const temp = CipherText()\n        _instance.sub(a.instance, b.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Multiplies two CipherTexts. This functions computes the product of a\n     * and b and stores the result in the destination parameter. Dynamic\n     * memory allocations in the process are allocated from the memory pool pointed\n     * to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#multiply\n     * @param {CipherText} a CipherText operand A\n     * @param {CipherText} b CipherText operand B\n     * @param {CipherText} [destination] CipherText destination to store the product\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const cipherTextB = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n     */\n    multiply(\n      a: CipherText,\n      b: CipherText,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.multiply(a.instance, b.instance, destination.instance, pool)\n          return\n        }\n        const temp = CipherText()\n        _instance.multiply(a.instance, b.instance, temp.instance, pool)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Squares a CipherText. This functions computes the square of encrypted and\n     * stores the result in the destination parameter. Dynamic memory allocations\n     * in the process are allocated from the memory pool pointed to by the given\n     * MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#square\n     * @param {CipherText} encrypted CipherText to square\n     * @param {CipherText} [destination] CipherText destination to store the squared result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.square(cipherTextA, cipherDest)\n     */\n    square(\n      encrypted: CipherText,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.square(encrypted.instance, destination.instance, pool)\n          return\n        }\n        const temp = CipherText()\n        _instance.square(encrypted.instance, temp.instance, pool)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n     * its size down to 2, and stores the result in the destination parameter.\n     * If the size of encrypted is K+1, the given relinearization keys need to\n     * have size at least K-1. Dynamic memory allocations in the process are allocated\n     * from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#relinearize\n     * @param {CipherText} encrypted CipherText to relinearize\n     * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n     * @param {CipherText} [destination] CipherText destination to store the relinearized result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const relinKeys = keyGenerator.relinKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n     */\n    relinearize(\n      encrypted: CipherText,\n      relinKeys: RelinKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.relinearize(\n          encrypted.instance,\n          relinKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n     * modulus down to q_1...q_{k-1} and stores the result in the destination\n     * parameter. Dynamic memory allocations in the process are allocated from\n     * the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#cipherModSwitchToNext\n     * @param {CipherText} encrypted CipherText to switch its modulus down\n     * @param {CipherText} [destination] CipherText destination to store the switched result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n     */\n    cipherModSwitchToNext(\n      encrypted: CipherText,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.cipherModSwitchToNext(encrypted.instance, temp.instance, pool)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n     * modulus down until the parameters reach the given parmsId and stores the\n     * result in the destination parameter. Dynamic memory allocations in the process\n     * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#cipherModSwitchTo\n     * @param {CipherText} encrypted CipherText to switch its modulus down\n     * @param {ParmsIdType} parmsId Target parmsId to switch to\n     * @param {CipherText} [destination] CipherText destination to store the switched result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const context = seal.Context(encParms, true)\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const parmsId = context.lastParmsId\n     * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n     */\n    cipherModSwitchTo(\n      encrypted: CipherText,\n      parmsId: ParmsIdType,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.cipherModSwitchTo(\n          encrypted.instance,\n          parmsId.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n     * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#plainModSwitchToNext\n     * @param {PlainText} plain PlainText to switch its modulus down\n     * @param {PlainText} [destination] PlainText destination to store the switched result\n     * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n     * @example\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n     * // or\n     * const plainDest = seal.PlainText()\n     * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n     */\n    plainModSwitchToNext(\n      plain: PlainText,\n      destination?: PlainText\n    ): PlainText | void {\n      try {\n        if (destination) {\n          _instance.plainModSwitchToNext(plain.instance, destination.instance)\n          return\n        }\n        const temp = PlainText()\n        _instance.plainModSwitchToNext(plain.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n     * the modulus down until the parameters reach the given parmsId and stores\n     * the result in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#plainModSwitchTo\n     * @param {PlainText} plain PlainText to switch its modulus down\n     * @param {ParmsIdType} parmsId Target parmsId to switch to\n     * @param {PlainText} [destination] PlainText destination to store the switched result\n     * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n     * @example\n     * const context = seal.Context(encParms, true)\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const parmsId = context.lastParmsId\n     * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n     * // or\n     * const plainDest = seal.PlainText()\n     * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n     */\n    plainModSwitchTo(\n      plain: PlainText,\n      parmsId: ParmsIdType,\n      destination?: PlainText\n    ): PlainText | void {\n      try {\n        if (destination) {\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            destination.instance\n          )\n          return\n        }\n        const temp = PlainText()\n        _instance.plainModSwitchTo(\n          plain.instance,\n          parmsId.instance,\n          temp.instance\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n     * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n     * stores the result in the destination parameter. Dynamic memory allocations\n     * in the process are allocated from the memory pool pointed to by the given\n     * MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#rescaleToNext\n     * @param {CipherText} encrypted CipherText to rescale\n     * @param {CipherText} [destination] CipherText destination to store the rescaled result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.rescaleToNext(cipherTextA, cipherDest)\n     */\n    rescaleToNext(\n      encrypted: CipherText,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.rescaleToNext(\n            encrypted.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n     * modulus down until the parameters reach the given parmsId, scales the message\n     * down accordingly, and stores the result in the destination parameter. Dynamic\n     * memory allocations in the process are allocated from the memory pool pointed\n     * to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#rescaleTo\n     * @param {CipherText} encrypted CipherText to rescale\n     * @param {ParmsIdType} parmsId Target parmsId to rescale to\n     * @param {CipherText} [destination] CipherText destination to store the rescaled result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const context = seal.Context(encParms, true)\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const parmsId = context.lastParmsId\n     * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n     */\n    rescaleTo(\n      encrypted: CipherText,\n      parmsId: ParmsIdType,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.rescaleTo(\n          encrypted.instance,\n          parmsId.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Exponentiates a CipherText. This functions raises encrypted to a power and\n     * stores the result in the destination parameter. Dynamic memory allocations\n     * in the process are allocated from the memory pool pointed to by the given\n     * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n     * relinearization is performed automatically after every multiplication in\n     * the process. In relinearization the given relinearization keys are used.\n     *\n     * @function\n     * @name Evaluator#exponentiate\n     * @param {CipherText} encrypted CipherText to exponentiate\n     * @param {number} exponent Positive integer to exponentiate the CipherText\n     * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n     * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const relinKeys = keyGenerator.relinKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n     */\n    exponentiate(\n      encrypted: CipherText,\n      exponent: number,\n      relinKeys: RelinKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.exponentiate(\n          encrypted.instance,\n          exponent,\n          relinKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Adds a CipherText and a PlainText. This function adds a CipherText and\n     * a PlainText and stores the result in the destination parameter. The PlainText\n     * must be valid for the current encryption parameters.\n     *\n     * @function\n     * @name Evaluator#addPlain\n     * @param {CipherText} encrypted CipherText operand A\n     * @param {PlainText} plain PlainText operand B\n     * @param {CipherText} [destination] CipherText destination to store the sum\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const plainTextB = seal.PlainText()\n     * // ... after encrypting/encoding some data ...\n     * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n     */\n    addPlain(\n      encrypted: CipherText,\n      plain: PlainText,\n      destination?: CipherText\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            destination.instance\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.addPlain(encrypted.instance, plain.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n     * from a CipherText and stores the result in the destination parameter. The\n     * PlainText must be valid for the current encryption parameters.\n     *\n     * @function\n     * @name Evaluator#subPlain\n     * @param {CipherText} encrypted CipherText operand A\n     * @param {PlainText} plain PlainText operand B\n     * @param {CipherText} [destination] CipherText destination to store the difference\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const plainTextB = seal.PlainText()\n     * // ... after encrypting/encoding some data ...\n     * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n     */\n    subPlain(\n      encrypted: CipherText,\n      plain: PlainText,\n      destination?: CipherText\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            destination.instance\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.subPlain(encrypted.instance, plain.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Multiplies a CipherText with a PlainText. This function multiplies\n     * a CipherText with a PlainText and stores the result in the destination\n     * parameter. The PlainText must be a valid for the current encryption parameters,\n     * and cannot be identially 0. Dynamic memory allocations in the process are\n     * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#multiplyPlain\n     * @param {CipherText} encrypted CipherText operand A\n     * @param {PlainText} plain PlainText operand B\n     * @param {CipherText} [destination] CipherText destination to store the product\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * const plainTextB = seal.PlainText()\n     * // ... after encrypting/encoding some data ...\n     * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n     */\n    multiplyPlain(\n      encrypted: CipherText,\n      plain: PlainText,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.multiplyPlain(\n          encrypted.instance,\n          plain.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Transforms a PlainText to NTT domain. This functions applies the number\n     * Theoretic Transform to a PlainText by first embedding integers modulo the\n     * PlainText modulus to integers modulo the coefficient modulus and then\n     * performing David Harvey's NTT on the resulting polynomial. The transformation\n     * is done with respect to encryption parameters corresponding to a given\n     * parmsId. The result is stored in the destinationNtt parameter. For the\n     * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n     * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n     * must be a valid PlainText under the current encryption parameters. Dynamic\n     * memory allocations in the process are allocated from the memory pool pointed\n     * to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#plainTransformToNtt\n     * @param {PlainText} plain PlainText to transform\n     * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n     * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n     * @example\n     * const context = seal.Context(encParms, true)\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const parmsId = context.lastParmsId\n     * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n     * // or\n     * const plainDest = seal.PlainText()\n     * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n     */\n    plainTransformToNtt(\n      plain: PlainText,\n      parmsId: ParmsIdType,\n      destinationNtt?: PlainText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): PlainText | void {\n      try {\n        if (destinationNtt) {\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            destinationNtt.instance,\n            pool\n          )\n          return\n        }\n        const temp = PlainText()\n        _instance.plainTransformToNtt(\n          plain.instance,\n          parmsId.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n     * number Theoretic Transform separately to each polynomial of a CipherText.\n     * The result is stored in the destinationNtt parameter.\n     *\n     * @function\n     * @name Evaluator#cipherTransformToNtt\n     * @param {CipherText} encrypted CipherText to transform\n     * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n     */\n    cipherTransformToNtt(\n      encrypted: CipherText,\n      destinationNtt?: CipherText\n    ): CipherText | void {\n      try {\n        if (destinationNtt) {\n          _instance.cipherTransformToNtt(\n            encrypted.instance,\n            destinationNtt.instance\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Transforms a CipherText back from NTT domain. This functions applies the\n     * inverse of David Harvey's number Theoretic Transform separately to each\n     * polynomial of a CipherText. The result is stored in the destination parameter.\n     *\n     * @function\n     * @name Evaluator#cipherTransformFromNtt\n     * @param {CipherText} encryptedNtt CipherText to transform\n     * @param {CipherText} [destination] CipherText destination to store the transformed result\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * // ... after cipherTransformToNtt ...\n     * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n     */\n    cipherTransformFromNtt(\n      encryptedNtt: CipherText,\n      destination?: CipherText\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.cipherTransformFromNtt(\n            encryptedNtt.instance,\n            destination.instance\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Applies a Galois automorphism to a CipherText and writes the result to the\n     * destination parameter. To evaluate the Galois automorphism, an appropriate\n     * set of Galois keys must also be provided. Dynamic memory allocations in\n     * the process are allocated from the memory pool pointed to by the given\n     * MemoryPoolHandle.\n     *\n     * The desired Galois automorphism is given as a Galois element, and must be\n     * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n     * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n     * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n     * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n     * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n     * In the polynomial view (not batching), a Galois automorphism by a Galois\n     * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n     *\n     * @function\n     * @name Evaluator#applyGalois\n     * @param {CipherText} encrypted CipherText to apply the automorphism\n     * @param {number} galoisElt number representing the Galois element\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {CipherText} [destination] CipherText destination to store the result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * ...\n     * const evaluator = seal.Evaluator(context)\n     * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n     * const plain = encoder.encode(arr)\n     * const cipher = encryptor.encrypt(plain)\n     * const cipherDest = seal.CipherText()\n     * const galElt = 2 * parms.polyModulusDegree - 1\n     * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n     */\n    applyGalois(\n      encrypted: CipherText,\n      galoisElt: number,\n      galoisKeys: GaloisKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.applyGalois(\n          encrypted.instance,\n          galoisElt,\n          galoisKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Rotates PlainText matrix rows cyclically. When batching is used with the\n     * BFV scheme, this function rotates the encrypted PlainText matrix rows\n     * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n     * the result to the destination parameter. Since the size of the batched\n     * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n     * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n     * memory allocations in the process are allocated from the memory pool pointed\n     * to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#rotateRows\n     * @param {CipherText} encrypted CipherText to rotate rows\n     * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {CipherText} [destination] CipherText destination to store the rotated result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n     */\n    rotateRows(\n      encrypted: CipherText,\n      steps: number,\n      galoisKeys: GaloisKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.rotateRows(\n          encrypted.instance,\n          steps,\n          galoisKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Rotates PlainText matrix columns cyclically. When batching is used with\n     * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n     * cyclically, and writes the result to the destination parameter. Since the\n     * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n     * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n     * allocations in the process are allocated from the memory pool pointed to\n     * by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#rotateColumns\n     * @param {CipherText} encrypted CipherText to rotate columns\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {CipherText} [destination] CipherText destination to store the rotated result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n     */\n    rotateColumns(\n      encrypted: CipherText,\n      galoisKeys: GaloisKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.rotateColumns(\n          encrypted.instance,\n          galoisKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n     * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n     * or to the right (steps < 0) and writes the result to the destination parameter.\n     * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n     * of the polynomial modulus, the number of steps to rotate must have absolute\n     * value at most N/2-1. Dynamic memory allocations in the process are allocated\n     * from the memory pool pointed to by the given MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#rotateVector\n     * @param {CipherText} encrypted CipherText to rotate the entire vector\n     * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {CipherText} [destination] CipherText destination to store the rotated result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n     */\n    rotateVector(\n      encrypted: CipherText,\n      steps: number,\n      galoisKeys: GaloisKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.rotateVector(\n          encrypted.instance,\n          steps,\n          galoisKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n     * function complex conjugates all values in the underlying PlainText, and\n     * writes the result to the destination parameter. Dynamic memory allocations\n     * in the process are allocated from the memory pool pointed to by the given\n     * MemoryPoolHandle.\n     *\n     * @function\n     * @name Evaluator#complexConjugate\n     * @param {CipherText} encrypted CipherText to complex conjugate\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {CipherText} [destination] CipherText destination to store the conjugated result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n     */\n    complexConjugate(\n      encrypted: CipherText,\n      galoisKeys: GaloisKeys,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            destination.instance,\n            pool\n          )\n          return\n        }\n        const temp = CipherText()\n        _instance.complexConjugate(\n          encrypted.instance,\n          galoisKeys.instance,\n          temp.instance,\n          pool\n        )\n        return temp\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n     *\n     * @function\n     * @name Evaluator#sumElements\n     * @param {CipherText} encrypted CipherText to sum elements\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {SchemeType} scheme Scheme that was used for encryption\n     * @param {CipherText} [destination] CipherText destination to store the result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n     */\n    sumElements(\n      encrypted: CipherText,\n      galoisKeys: GaloisKeys,\n      scheme: SchemeType,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            destination.instance,\n            pool\n          )\n          return\n        }\n\n        const newDest = CipherText()\n        _instance.sumElements(\n          encrypted.instance,\n          galoisKeys.instance,\n          scheme,\n          newDest.instance,\n          pool\n        )\n        return newDest\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n     * element.\n     *\n     * @function\n     * @name Evaluator#dotProduct\n     * @param {CipherText} a CipherText operand A\n     * @param {CipherText} b CipherText operand B\n     * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {SchemeType} scheme Scheme that was used for encryption\n     * @param {CipherText} [destination] CipherText destination to store the result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const relinKeys = keyGenerator.relinKeys()\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * const cipherTextB = seal.CipherText()\n     * // ... after encrypting some data ...\n     * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n     */\n    dotProduct(\n      a: CipherText,\n      b: CipherText,\n      relinKeys: RelinKeys,\n      galoisKeys: GaloisKeys,\n      scheme: SchemeType,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.multiply(a.instance, b.instance, destination.instance, pool)\n          _instance.relinearize(\n            destination.instance,\n            relinKeys.instance,\n            destination.instance,\n            pool\n          )\n          _instance.sumElements(\n            destination.instance,\n            galoisKeys.instance,\n            scheme,\n            destination.instance,\n            pool\n          )\n          return\n        }\n\n        const newDest = CipherText()\n        _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n        _instance.relinearize(\n          newDest.instance,\n          relinKeys.instance,\n          newDest.instance,\n          pool\n        )\n        _instance.sumElements(\n          newDest.instance,\n          galoisKeys.instance,\n          scheme,\n          newDest.instance,\n          pool\n        )\n        return newDest\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n     * product in every element.\n     *\n     * @function\n     * @name Evaluator#dotProductPlain\n     * @param {CipherText} a CipherText operand A\n     * @param {PlainText} b PlainText operand B\n     * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n     * @param {SchemeType} scheme Scheme that was used for encryption\n     * @param {CipherText} [destination] CipherText destination to store the result\n     * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n     * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n     * @example\n     * const galoisKeys = keyGenerator.galoisKeys()\n     * const cipherTextA = seal.CipherText()\n     * const plainTextB = seal.PlainText()\n     * // ... after encoding / encrypting some data ...\n     * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n     * // or\n     * const cipherDest = seal.CipherText()\n     * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n     */\n    dotProductPlain(\n      a: CipherText,\n      b: PlainText,\n      galoisKeys: GaloisKeys,\n      scheme: SchemeType,\n      destination?: CipherText,\n      pool: MemoryPoolHandle = MemoryPoolHandle.global\n    ): CipherText | void {\n      try {\n        if (destination) {\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            destination.instance,\n            pool\n          )\n          _instance.sumElements(\n            destination.instance,\n            galoisKeys.instance,\n            scheme,\n            destination.instance,\n            pool\n          )\n          return\n        }\n\n        const newDest = CipherText()\n        _instance.multiplyPlain(a.instance, b.instance, newDest.instance, pool)\n        _instance.sumElements(\n          newDest.instance,\n          galoisKeys.instance,\n          scheme,\n          newDest.instance,\n          pool\n        )\n        return newDest\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type Exception = {\n  readonly safe: (error: number | Error | string) => Error\n}\n\nconst ExceptionConstructor = (\n  library: Library\n): ExceptionDependencies => (): ExceptionConstructorOptions => (): Exception => {\n  // Static methods\n  const _getException = library.getException\n\n  /**\n   * @implements Exception\n   */\n\n  /**\n   * @interface Exception\n   */\n  return {\n    /**\n     * Takes a caught exception in SEAL library and gets a safe error string\n     *\n     * @function\n     * @name Exception.safe\n     * @param {(number|Error|string)} error Unsafe error to normalize\n     * @returns {Error}\n     */\n    safe(error: number | Error | string): Error {\n      if (typeof error === 'number') {\n        return new Error(_getException(error))\n      }\n\n      if (error instanceof Error) {\n        return error\n      }\n      return new Error(error || 'Unknown Error!')\n    }\n  }\n}\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor = (library: Library): GaloisKeysDependencies => ({\n  Exception,\n  ComprModeType,\n  Vector\n}: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions => (): GaloisKeys => {\n  const Constructor = library.GaloisKeys\n  let _instance = new Constructor()\n\n  /**\n   * @implements GaloisKeys\n   */\n\n  /**\n   * @interface GaloisKeys\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name GaloisKeys#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name GaloisKeys#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name GaloisKeys#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Returns the current number of keyswitching keys. Only keys that are\n     * non-empty are counted.\n     *\n     * @readonly\n     * @name GaloisKeys#size\n     * @type {number}\n     */\n    get size() {\n      return _instance.size()\n    },\n\n    /**\n     * Returns the index of a Galois key in the backing KSwitchKeys instance that\n     * corresponds to the given Galois element, assuming that it exists in the\n     * backing KSwitchKeys.\n     *\n     * @function\n     * @name GaloisKeys#getIndex\n     * @param {number} galoisElt The Galois element\n     * @returns {number} The index of the galois element\n     */\n    getIndex(galoisElt: number): number {\n      try {\n        return _instance.getIndex(galoisElt)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Returns whether a Galois key corresponding to a given Galois element exists.\n     *\n     * @function\n     * @name GaloisKeys#hasKey\n     * @param {number} galoisElt The Galois element\n     * @returns {boolean} True if the key exists\n     */\n    hasKey(galoisElt: number): boolean {\n      try {\n        return _instance.hasKey(galoisElt)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n    /**\n     * Save the Encryption Parameters to a base64 string\n     *\n     * @function\n     * @name GaloisKeys#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      try {\n        return _instance.saveToString(compression)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save the GaloisKeys as a binary Uint8Array\n     *\n     * @function\n     * @name GaloisKeys#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a GaloisKeys from a base64 string\n     *\n     * @function\n     * @name GaloisKeys#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a GaloisKeys from an Uint8Array holding binary data\n     *\n     * @function\n     * @name GaloisKeys#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing GaloisKeys and overwrite this instance\n     *\n     * @function\n     * @name GaloisKeys#copy\n     * @param {GaloisKeys} key GaloisKeys to copy\n     * @example\n     * const keyA = keyGenerator.galoisKeys()\n     * const keyB = seal.GaloisKeys()\n     * keyB.copy(keyA)\n     * // keyB holds a copy of keyA\n     */\n    copy(key: GaloisKeys) {\n      try {\n        _instance.copy(key.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this GaloisKeys\n     *\n     * @function\n     * @name GaloisKeys#clone\n     * @returns {GaloisKeys}\n     * @example\n     * const keyA = keyGenerator.galoisKeys()\n     * const keyB = keyA.clone()\n     * // keyB holds a copy of keyA\n     */\n    clone(): GaloisKeys {\n      try {\n        const clonedInstance = _instance.clone()\n        const key = GaloisKeysConstructor(library)({\n          Exception,\n          ComprModeType,\n          Vector\n        })()\n        key.inject(clonedInstance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a GaloisKeys into this one and delete the old reference\n     *\n     * @function\n     * @name GaloisKeys#move\n     * @param {GaloisKeys} key GaloisKeys to move\n     * @example\n     * const keyA = keyGenerator.galoisKeys()\n     * const keyB = seal.GaloisKeys()\n     * keyB.move(keyA)\n     * // keyB holds a the instance of keyA.\n     * // keyA no longer holds an instance\n     */\n    move(key: GaloisKeys) {\n      try {\n        _instance.move(key.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        key.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly publicKey: () => PublicKey\n  readonly relinKeysLocal: () => RelinKeys\n  readonly relinKeys: () => Serializable\n  readonly galoisKeysLocal: (steps?: Int32Array) => GaloisKeys\n  readonly galoisKeys: (steps?: Int32Array) => Serializable\n}\n\nconst KeyGeneratorConstructor = (\n  library: Library\n): KeyGeneratorDependencies => ({\n  Exception,\n  PublicKey,\n  SecretKey,\n  RelinKeys,\n  GaloisKeys,\n  Serializable\n}: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions => (\n  context,\n  secretKey\n): KeyGenerator => {\n  const Constructor = library.KeyGenerator\n  let _instance = constructInstance(context, secretKey)\n\n  function constructInstance(context: Context, secretKey?: SecretKey) {\n    try {\n      if (secretKey) {\n        return new Constructor(context.instance, secretKey.instance)\n      }\n      return new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e)\n    }\n  }\n  /**\n   * @implements KeyGenerator\n   */\n\n  /**\n   * @interface KeyGenerator\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name KeyGenerator#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name KeyGenerator#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name KeyGenerator#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Return the generated SecretKey\n     *\n     * @function\n     * @name KeyGenerator#secretKey\n     * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n     */\n    secretKey(): SecretKey {\n      const key = SecretKey()\n      const instance = _instance.secretKey()\n      key.inject(instance)\n      return key\n    },\n\n    /**\n     * Return the generated PublicKey\n     *\n     * @function\n     * @name KeyGenerator#publicKey\n     * @returns {PublicKey} The public key that was generated upon instantiation of this KeyGenerator\n     */\n    publicKey(): PublicKey {\n      const key = PublicKey()\n      const instance = _instance.publicKey()\n      key.inject(instance)\n      return key\n    },\n\n    /**\n     * Generates and returns relinearization keys. This function returns\n     * relinearization keys in a fully expanded form and is meant to be used\n     * primarily for demo, testing, and debugging purposes.\n     *\n     * @function\n     * @name KeyGenerator#relinKeysLocal\n     * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n     */\n    relinKeysLocal(): RelinKeys {\n      try {\n        const key = RelinKeys()\n        const instance = _instance.relinKeysLocal()\n        key.inject(instance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Generates and returns relinearization keys as a serializable object.\n     *\n     * Half of the key data is pseudo-randomly generated from a seed to reduce\n     * the object size. The resulting serializable object cannot be used\n     * directly and is meant to be serialized for the size reduction to have an\n     * impact.\n     *\n     * @function\n     * @name KeyGenerator#relinKeys\n     * @returns {Serializable} New RelinKeys from the KeyGenerator's internal secret key\n     */\n    relinKeys(): Serializable {\n      try {\n        const serialized = Serializable()\n        const instance = _instance.relinKeys()\n        serialized.unsafeInject(instance)\n        return serialized\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Generates and returns Galois keys. This function returns Galois keys in\n     * a fully expanded form and is meant to be used primarily for demo, testing,\n     * and debugging purposes. The user can optionally give an input a vector of desired\n     * Galois rotation step counts, where negative step counts correspond to\n     * rotations to the right and positive step counts correspond to rotations to\n     * the left. A step count of zero can be used to indicate a column rotation\n     * in the BFV scheme complex conjugation in the CKKS scheme.\n     *\n     * @function\n     * @name KeyGenerator#galoisKeysLocal\n     * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n     * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n     */\n    galoisKeysLocal(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n      try {\n        const key = GaloisKeys()\n        const instance = _instance.galoisKeysLocal(steps)\n        key.inject(instance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Generates and returns Galois keys as a serializable object. This function\n     * creates specific Galois keys that can be used to apply specific Galois\n     * automorphisms on encrypted data. The user can optionally give an input a vector\n     * of desired Galois rotation step counts, where negative step counts\n     * correspond to rotations to the right and positive step counts correspond\n     * to rotations to the left. A step count of zero can be used to indicate\n     * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n     * Half of the key data is pseudo-randomly generated from a seed to reduce\n     * the object size. The resulting serializable object cannot be used\n     * directly and is meant to be serialized for the size reduction to have an\n     * impact.\n     *\n     * @function\n     * @name KeyGenerator#galoisKeys\n     * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n     * @returns {Serializable} Base64 encoded string\n     */\n    galoisKeys(steps: Int32Array = Int32Array.from([])): Serializable {\n      try {\n        const serialized = Serializable()\n        const instance = _instance.galoisKeys(steps)\n        serialized.unsafeInject(instance)\n        return serialized\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\n\nexport type IntegerEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type IntegerEncoderDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: IntegerEncoderDependencyOptions): IntegerEncoderConstructorOptions\n}\n\nexport type IntegerEncoderConstructorOptions = {\n  (context: Context): IntegerEncoder\n}\n\nexport type IntegerEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encodeInt32: (\n    value: number,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly encodeUint32: (\n    value: number,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly decodeInt32: (plainText: PlainText) => number\n  readonly decodeUint32: (plainText: PlainText) => number\n}\n\nconst IntegerEncoderConstructor = (\n  library: Library\n): IntegerEncoderDependencies => ({\n  Exception,\n  PlainText\n}: IntegerEncoderDependencyOptions): IntegerEncoderConstructorOptions => (\n  context\n): IntegerEncoder => {\n  const Constructor = library.IntegerEncoder\n  let _instance: Instance\n  try {\n    _instance = new Constructor(context.instance)\n  } catch (e) {\n    throw Exception.safe(e)\n  }\n  /**\n   * @implements IntegerEncoder\n   */\n\n  /**\n   * @interface IntegerEncoder\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name IntegerEncoder#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name IntegerEncoder#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name IntegerEncoder#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Encode an Int32 value to a PlainText\n     *\n     * @function\n     * @name IntegerEncoder#encodeInt32\n     * @param {number} value Integer to encode\n     * @param {PlainText} [destination] PlainText to store the encoded data\n     * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n     */\n    encodeInt32(value: number, destination?: PlainText): PlainText | void {\n      try {\n        if (destination) {\n          _instance.encodeInt32(value, destination.instance)\n          return\n        }\n        const tempPlain = PlainText()\n        _instance.encodeInt32(value, tempPlain.instance)\n        return tempPlain\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Encode an Uint32 value to a PlainText\n     *\n     * @function\n     * @name IntegerEncoder#encodeUint32\n     * @param {number} value Unsigned integer to encode\n     * @param {PlainText} [destination] PlainText to store the encoded data\n     * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n     */\n    encodeUint32(value: number, destination?: PlainText): PlainText | void {\n      try {\n        if (destination) {\n          _instance.encodeUint32(value, destination.instance)\n          return\n        }\n        const tempPlain = PlainText()\n        _instance.encodeUint32(value, tempPlain.instance)\n        return tempPlain\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n    /**\n     * Decode an Int32 value from a PlainText\n     *\n     * @function\n     * @name IntegerEncoder#decodeInt32\n     * @param {PlainText} plainText PlainText to decode\n     * @returns {number} Int32 value\n     */\n    decodeInt32(plainText: PlainText): number {\n      try {\n        return _instance.decodeInt32(plainText.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Decode an Uint32 value from a PlainText\n     *\n     * @function\n     * @name IntegerEncoder#decodeUint32\n     * @param {PlainText} plainText PlainText to decode\n     * @returns {number} Uint32 value\n     */\n    decodeUint32(plainText: PlainText): number {\n      try {\n        return _instance.decodeUint32(plainText.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const IntegerEncoderInit = ({\n  loader\n}: LoaderOptions): IntegerEncoderDependencies => {\n  const library: Library = loader.library\n  return IntegerEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor = (\n  library: Library\n): MemoryPoolHandleDependencies => (): MemoryPoolHandleConstructorOptions => (): MemoryPoolHandle => {\n  // Static methods\n  const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n  const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n  /**\n   * @implements MemoryPoolHandle\n   */\n\n  /**\n   * @interface MemoryPoolHandle\n   */\n  return {\n    /**\n     * The MemoryPoolHandle pointing to the global memory pool.\n     *\n     * @readonly\n     * @name MemoryPoolHandle.global\n     * @type {MemoryPoolHandle.global}\n     */\n    get global() {\n      /**\n       * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n       */\n      return _global()\n    },\n\n    /**\n     * The MemoryPoolHandle pointing to the thread-local memory pool.\n     *\n     * @readonly\n     * @name MemoryPoolHandle.threadLocal\n     * @type {MemoryPoolHandle.threadLocal}\n     */\n    get threadLocal() {\n      /**\n       * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n       */\n      return _threadLocal()\n    }\n  }\n}\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: BigInt): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: BigInt) => void\n  readonly value: BigInt\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor = (library: Library): ModulusDependencies => ({\n  Exception,\n  ComprModeType,\n  Vector\n}: ModulusDependencyOptions): ModulusConstructorOptions => (\n  value: BigInt\n): Modulus => {\n  // Static methods\n  const Constructor = library.Modulus\n\n  let _instance = createModulus(value)\n\n  function createModulus(value: BigInt) {\n    try {\n      const inst = new Constructor()\n      inst.setValue(value.toString())\n      return inst\n    } catch (e) {\n      throw Exception.safe(e)\n    }\n  }\n\n  /**\n   * @implements Modulus\n   */\n\n  /**\n   * @interface Modulus\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Modulus#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name Modulus#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Modulus#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Loads a Modulus from a string representing an uint64 value.\n     *\n     * @function\n     * @name Modulus#setValue\n     * @param {BigInt} value BigInt value to set\n     */\n    setValue(value: BigInt) {\n      try {\n        _instance.setValue(value.toString())\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * The value of the current Modulus as a BigInt.\n     *\n     * @readonly\n     * @name Modulus#value\n     * @type {BigInt}\n     */\n    get value() {\n      // eslint-disable-next-line no-undef\n      return BigInt(_instance.value())\n    },\n\n    /**\n     * The significant bit count of the value of the current Modulus.\n     *\n     * @readonly\n     * @name Modulus#bitCount\n     * @type {number}\n     */\n    get bitCount() {\n      return _instance.bitCount()\n    },\n\n    /**\n     * Whether the value of the current Modulus is zero.\n     *\n     * @readonly\n     * @name Modulus#isZero\n     * @type {boolean}\n     */\n    get isZero() {\n      return _instance.isZero()\n    },\n\n    /**\n     * Whether the value of the current Modulus is a prime number.\n     *\n     * @readonly\n     * @name Modulus#isPrime\n     * @type {boolean}\n     */\n    get isPrime() {\n      return _instance.isPrime()\n    },\n\n    /**\n     * Save the Modulus as a base64 string\n     *\n     * @function\n     * @name Modulus#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      return _instance.saveToString(compression)\n    },\n\n    /**\n     * Save the Modulus as a binary Uint8Array\n     *\n     * @function\n     * @name Modulus#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the Modulus in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a Modulus from a base64 string\n     *\n     * @function\n     * @name SecretKey#load\n     * @param {string} encoded Base64 encoded string\n     */\n    load(encoded: string) {\n      try {\n        _instance.loadFromString(encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a Modulus from an Uint8Array holding binary data\n     *\n     * @function\n     * @name SecretKey#loadArray\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(array: Uint8Array) {\n      try {\n        _instance.loadFromArray(array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor = (library: Library): ParmsIdTypeDependencies => ({\n  Exception\n}: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions => (): ParmsIdType => {\n  const Constructor = library.ParmsIdType\n\n  let _instance: Instance\n\n  /**\n   * @implements ParmsIdType\n   */\n\n  /**\n   * @interface ParmsIdType\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name ParmsIdType#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name ParmsIdType#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name ParmsIdType#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * The values of the current ParmsIdType as an Array of BigInts.\n     *\n     * @readonly\n     * @name ParmsIdType#values\n     * @type {BigUint64Array}\n     */\n    get values() {\n      try {\n        const instance = _instance.values()\n        return BigUint64Array.from(instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor = (library: Library): PlainTextDependencies => ({\n  Exception,\n  ComprModeType,\n  ParmsIdType,\n  MemoryPoolHandle,\n  Vector\n}: PlainTextDependencyOptions): PlainTextConstructorOptions => ({\n  capacity,\n  coeffCount,\n  pool = MemoryPoolHandle.global\n} = {}): PlainText => {\n  // Static methods\n  const Constructor = library.Plaintext\n\n  let _instance = construct({\n    capacity,\n    coeffCount,\n    pool\n  })\n\n  function construct({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  }: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }) {\n    try {\n      if (capacity === undefined && coeffCount === undefined) {\n        return new Constructor(pool)\n      } else if (capacity === undefined && coeffCount !== undefined) {\n        return new Constructor(coeffCount, pool)\n      } else if (capacity !== undefined && coeffCount !== undefined) {\n        return new Constructor(capacity, coeffCount, pool)\n      } else {\n        throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n      }\n    } catch (e) {\n      throw Exception.safe(e)\n    }\n  }\n  /**\n   * @implements PlainText\n   */\n\n  /**\n   * @interface PlainText\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name PlainText#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name PlainText#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name PlainText#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Allocates enough memory to accommodate the backing array of a plaintext\n     * with given capacity.\n     *\n     * @function\n     * @name PlainText#reserve\n     * @param {number} capacity The capacity to reserve\n     */\n    reserve(capacity: number) {\n      try {\n        return _instance.reserve(capacity)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Allocates enough memory to accommodate the backing array of the current\n     * PlainText and copies it over to the new location. This function is meant\n     * to reduce the memory use of the PlainText to smallest possible and can be\n     * particularly important after modulus switching.\n     *\n     * @function\n     * @name PlainText#shrinkToFit\n     */\n    shrinkToFit() {\n      _instance.shrinkToFit()\n    },\n\n    /**\n     * Resets the PlainText. This function releases any memory allocated by the\n     * PlainText, returning it to the memory pool.\n     *\n     * @function\n     * @name PlainText#release\n     */\n    release() {\n      _instance.release()\n    },\n\n    /**\n     * Resizes the PlainText to have a given coefficient count. The PlainText\n     * is automatically reallocated if the new coefficient count does not fit in\n     * the current capacity.\n     *\n     * @function\n     * @name PlainText#resize\n     * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n     */\n    resize(coeffCount: number) {\n      try {\n        _instance.resize(coeffCount)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Sets the PlainText polynomial to zero.\n     *\n     * @function\n     * @name PlainText#setZero\n     */\n    setZero() {\n      _instance.setZero()\n    },\n\n    /**\n     * Whether the current PlainText polynomial has all zero coefficients.\n     *\n     * @readonly\n     * @name PlainText#isZero\n     * @type {boolean}\n     */\n    get isZero() {\n      return _instance.isZero()\n    },\n\n    /**\n     * The capacity of the current allocation.\n     *\n     * @readonly\n     * @name PlainText#capacity\n     * @type {number}\n     */\n    get capacity() {\n      return _instance.capacity()\n    },\n\n    /**\n     * The coefficient count of the current PlainText polynomial.\n     *\n     * @readonly\n     * @name PlainText#coeffCount\n     * @type {number}\n     */\n    get coeffCount() {\n      return _instance.coeffCount()\n    },\n\n    /**\n     * The significant coefficient count of the current PlainText polynomial.\n     *\n     * @readonly\n     * @name PlainText#significantCoeffCount\n     * @type {number}\n     */\n    get significantCoeffCount() {\n      return _instance.significantCoeffCount()\n    },\n\n    /**\n     * Returns the non-zero coefficient count of the current PlainText polynomial.\n     *\n     * @readonly\n     * @name PlainText#nonzeroCoeffCount\n     * @type {number}\n     */\n    get nonzeroCoeffCount() {\n      return _instance.nonzeroCoeffCount()\n    },\n\n    /**\n     * Returns a human-readable string description of the PlainText polynomial.\n     *\n     * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n     * summarized by the following:\n     * 1. Terms are listed in order of strictly decreasing exponent\n     * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n     * letters are in upper-case)\n     * 3. Exponents are positive and in decimal format\n     * 4. Zero coefficient terms (including the constant term) are omitted unless\n     * the polynomial is exactly 0 (see rule 9)\n     * 5. Term with the exponent value of one is written as x^1\n     * 6. Term with the exponent value of zero (the constant term) is written as\n     * just a hexadecimal number without x or exponent\n     * 7. Terms are separated exactly by <space>+<space>\n     * 8. Other than the +, no other terms have whitespace\n     * 9. If the polynomial is exactly 0, the string \"0\" is returned\n     *\n     * @function\n     * @name PlainText#toPolynomial\n     * @throws std::invalid_argument if the PlainText is in NTT transformed form\n     * @returns {string} Polynomial string\n     */\n    toPolynomial(): string {\n      try {\n        return _instance.toPolynomial()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Whether the PlainText is in NTT form.\n     *\n     * @readonly\n     * @name PlainText#isNttForm\n     * @type {boolean}\n     */\n    get isNttForm() {\n      return _instance.isNttForm()\n    },\n\n    /**\n     * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n     * PlainText polynomial is in NTT form.\n     *\n     * @see {@link EncryptionParameters} for more information about parmsId.\n     *\n     * @readonly\n     * @name PlainText#parmsId\n     * @type {ParmsIdType}\n     */\n    get parmsId() {\n      const parms = ParmsIdType()\n      parms.inject(_instance.parmsId())\n      return parms\n    },\n\n    /**\n     * The reference to the scale. This is only needed when using the CKKS\n     * encryption scheme. The user should have little or no reason to ever change\n     * the scale by hand.\n     *\n     * @readonly\n     * @name PlainText#scale\n     * @type {number}\n     */\n    get scale() {\n      return _instance.scale()\n    },\n\n    /**\n     * Sets the PlainText scale. This is only needed when using the\n     * CKKS encryption scheme. The user should have little or no reason to ever\n     * change the scale by hand.\n     *\n     * @function\n     * @name PlainText#setScale\n     * @param {number} scale The scale to set\n     */\n    setScale(scale: number) {\n      _instance.setScale(scale)\n    },\n\n    /**\n     * The currently used MemoryPoolHandle.\n     *\n     * @readonly\n     * @name PlainText#pool\n     * @type {MemoryPoolHandle}\n     */\n    get pool() {\n      return _instance.pool()\n    },\n\n    /**\n     * Save the PlainText to a base64 string\n     *\n     * @function\n     * @name PlainText#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      return _instance.saveToString(compression)\n    },\n\n    /**\n     * Save the PlainText as a binary Uint8Array\n     *\n     * @function\n     * @name PlainText#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the PlainText in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a PlainText from a base64 string\n     *\n     * @function\n     * @name PlainText#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a PlainText from an Uint8Array holding binary data\n     *\n     * @function\n     * @name PlainText#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing PlainText and overwrite this instance\n     *\n     * @function\n     * @name PlainText#copy\n     * @param {PlainText} plain PlainText to copy\n     * @example\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const plainTextB = seal.PlainText()\n     * plainTextB.copy(plainTextA)\n     * // plainTextB holds a copy of plainTextA\n     */\n    copy(plain: PlainText) {\n      try {\n        _instance.copy(plain.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this PlainText\n     *\n     * @function\n     * @name PlainText#clone\n     * @returns {PlainText}\n     * @example\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const plainTextB = plainTextA.clone()\n     * // plainTextB holds a copy of plainTextA\n     */\n    clone(): PlainText {\n      try {\n        const clonedInstance = _instance.clone()\n        const plain = PlainTextConstructor(library)({\n          Exception,\n          ComprModeType,\n          ParmsIdType,\n          MemoryPoolHandle,\n          Vector\n        })()\n        plain.unsafeInject(clonedInstance)\n        return plain\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a PlainText into this one and delete the old reference\n     *\n     * @function\n     * @name PlainText#move\n     * @param {PlainText} plain PlainText to move\n     * @example\n     * const plainTextA = seal.PlainText()\n     * // ... after encoding some data ...\n     * const plainTextB = seal.PlainText()\n     * plainTextB.move(plainTextA)\n     * // plainTextB holds a the instance of plainTextA.\n     * // plainTextA no longer holds an instance\n     */\n    move(plain: PlainText) {\n      try {\n        _instance.move(plain.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        plain.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor = (\n  library: Library\n): PlainModulusDependencies => ({\n  Exception,\n  Modulus,\n  Vector\n}: PlainModulusDependencyOptions): PlainModulusConstructorOptions => (): PlainModulus => {\n  // Static methods\n  const _Batching = library.PlainModulus.Batching\n  const _BatchingVector = library.PlainModulus.BatchingVector\n\n  /**\n   * @implements PlainModulus\n   */\n\n  /**\n   * @interface PlainModulus\n   */\n  return {\n    /**\n     * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n     * parameter that supports batching with a given polyPlainModulusDegree.\n     *\n     * @function\n     * @name PlainModulus.Batching\n     * @param {number} polyModulusDegree The degree of the polynomial modulus\n     * @param {number} bitSize The bit-size of the desired prime number\n     * @returns {Modulus} A PlainModulus containing the prime number\n     */\n    Batching(polyModulusDegree: number, bitSize: number): Modulus {\n      try {\n        const smallMod = Modulus(BigInt(0))\n        smallMod.inject(_Batching(polyModulusDegree, bitSize))\n        return smallMod\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Creates several prime number PlainModulus elements that can be used as\n     * plainPlainModulus encryption parameters, each supporting batching with a given\n     * polyPlainModulusDegree.\n     *\n     * @function\n     * @name PlainModulus.BatchingVector\n     * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n     * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n     * @returns {Vector} Vector of Modulus containing prime numbers\n     */\n    BatchingVector(\n      polyPlainModulusDegree: number,\n      bitSizes: Int32Array\n    ): Vector {\n      try {\n        const vectBitSizes = Vector()\n        vectBitSizes.from(bitSizes)\n        const vect = _BatchingVector(\n          polyPlainModulusDegree,\n          vectBitSizes.instance\n        )\n        vectBitSizes.delete()\n        return vect\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor = (library: Library): PublicKeyDependencies => ({\n  Exception,\n  ComprModeType,\n  Vector\n}: PublicKeyDependencyOptions): PublicKeyConstructorOptions => (): PublicKey => {\n  const Constructor = library.PublicKey\n  let _instance = new Constructor()\n\n  /**\n   * @implements PublicKey\n   */\n\n  /**\n   * @interface PublicKey\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name PublicKey#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name PublicKey#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name PublicKey#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Save the Encryption Parameters to a base64 string\n     *\n     * @function\n     * @name PublicKey#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      try {\n        return _instance.saveToString(compression)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save the PublicKey as a binary Uint8Array\n     *\n     * @function\n     * @name PublicKey#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a PublicKey from a base64 string\n     *\n     * @function\n     * @name PublicKey#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a PublicKey from an Uint8Array holding binary data\n     *\n     * @function\n     * @name PublicKey#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing PublicKey and overwrite this instance\n     *\n     * @function\n     * @name PublicKey#copy\n     * @param {PublicKey} key PublicKey to copy\n     * @example\n     * const keyA = keyGenerator.publicKey()\n     * const keyB = seal.PublicKey()\n     * keyB.copy(keyA)\n     * // keyB holds a copy of keyA\n     */\n    copy(key: PublicKey) {\n      try {\n        _instance.copy(key.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this PublicKey\n     *\n     * @function\n     * @name PublicKey#clone\n     * @returns {PublicKey}\n     * @example\n     * const keyA = keyGenerator.publicKey()\n     * const keyB = keyA.clone()\n     * // keyB holds a copy of keyA\n     */\n    clone(): PublicKey {\n      try {\n        const clonedInstance = _instance.clone()\n        const key = PublicKeyConstructor(library)({\n          Exception,\n          ComprModeType,\n          Vector\n        })()\n        key.inject(clonedInstance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a PublicKey into this one and delete the old reference\n     *\n     * @function\n     * @name PublicKey#move\n     * @param {PublicKey} key PublicKey to move\n     * @example\n     * const keyA = keyGenerator.publicKey()\n     * const keyB = seal.PublicKey()\n     * keyB.move(keyA)\n     * // keyB holds a the instance of keyA.\n     * // keyA no longer holds an instance\n     */\n    move(key: PublicKey) {\n      try {\n        _instance.move(key.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        key.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor = (library: Library): RelinKeysDependencies => ({\n  Exception,\n  ComprModeType,\n  Vector\n}: RelinKeysDependencyOptions): RelinKeysConstructorOptions => (): RelinKeys => {\n  const Constructor = library.RelinKeys\n  let _instance = new Constructor()\n\n  /**\n   * @implements RelinKeys\n   */\n\n  /**\n   * @interface RelinKeys\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name RelinKeys#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name RelinKeys#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name RelinKeys#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Returns the current number of keyswitching keys. Only keys that are\n     * non-empty are counted.\n     *\n     * @readonly\n     * @name RelinKeys#size\n     * @type {number}\n     */\n    get size() {\n      return _instance.size()\n    },\n\n    /**\n     * Returns the index of a relinearization key in the backing KSwitchKeys\n     * instance that corresponds to the given secret key power, assuming that\n     * it exists in the backing KSwitchKeys.\n     *\n     * @function\n     * @name RelinKeys#getIndex\n     * @param {number} keyPower The power of the secret key\n     * @returns {number} The index of the relin key\n     */\n    getIndex(keyPower: number): number {\n      try {\n        return _instance.getIndex(keyPower)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Returns whether a relinearization key corresponding to a given power of\n     * the secret key exists.\n     *\n     * @function\n     * @name RelinKeys#hasKey\n     * @param {number} keyPower The power of the secret key\n     * @returns {boolean} True if the power exists\n     */\n    hasKey(keyPower: number): boolean {\n      try {\n        return _instance.hasKey(keyPower)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save the Encryption Parameters to a base64 string\n     *\n     * @function\n     * @name RelinKeys#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      try {\n        return _instance.saveToString(compression)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save the RelinKeys as a binary Uint8Array\n     *\n     * @function\n     * @name RelinKeys#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a RelinKeys from a base64 string\n     *\n     * @function\n     * @name RelinKeys#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a RelinKeys from an Uint8Array holding binary data\n     *\n     * @function\n     * @name RelinKeys#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing RelinKeys and overwrite this instance\n     *\n     * @function\n     * @name RelinKeys#copy\n     * @param {RelinKeys} key RelinKeys to copy\n     * @example\n     * const keyA = keyGenerator.relinKeys()\n     * const keyB = seal.RelinKeys()\n     * keyB.copy(keyA)\n     * // keyB holds a copy of keyA\n     */\n    copy(key: RelinKeys) {\n      try {\n        _instance.copy(key.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this RelinKeys\n     *\n     * @function\n     * @name RelinKeys#clone\n     * @returns {RelinKeys}\n     * @example\n     * const keyA = keyGenerator.relinKeys()\n     * const keyB = keyA.clone()\n     * // keyB holds a copy of keyA\n     */\n    clone(): RelinKeys {\n      try {\n        const clonedInstance = _instance.clone()\n        const key = RelinKeysConstructor(library)({\n          Exception,\n          ComprModeType,\n          Vector\n        })()\n        key.inject(clonedInstance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a RelinKeys into this one and delete the old reference\n     *\n     * @function\n     * @name RelinKeys#move\n     * @param {RelinKeys} key RelinKeys to move\n     * @example\n     * const keyA = keyGenerator.relinKeys()\n     * const keyB = seal.RelinKeys()\n     * keyB.move(keyA)\n     * // keyB holds a the instance of keyA.\n     * // keyA no longer holds an instance\n     */\n    move(key: RelinKeys) {\n      try {\n        _instance.move(key.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        key.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly BFV: any\n  readonly CKKS: any\n}\n\nconst SchemeTypeConstructor = (\n  library: Library\n): SchemeTypeDependencies => (): SchemeTypeConstructorOptions => (): SchemeType => {\n  // Static methods\n  const _none = library.SchemeType.none\n  const _BFV = library.SchemeType.BFV\n  const _CKKS = library.SchemeType.CKKS\n\n  /**\n   * @implements SchemeType\n   */\n\n  /**\n   * @interface SchemeType\n   */\n  return {\n    /**\n     * Return the 'none' scheme type\n     *\n     * @readonly\n     * @name SchemeType.none\n     * @type {SchemeType.none}\n     */\n    get none() {\n      /**\n       * @typedef {SchemeType.none} SchemeType.none\n       */\n      return _none\n    },\n\n    /**\n     * Return the 'BFV' scheme type\n     *\n     * @readonly\n     * @name SchemeType.BFV\n     * @type {SchemeType.BFV}\n     */\n    get BFV() {\n      /**\n       * @typedef {SchemeType.BFV} SchemeType.BFV\n       */\n      return _BFV\n    },\n\n    /**\n     * Return the 'CKKS' scheme type\n     *\n     * @readonly\n     * @name SchemeType.CKKS\n     * @type {SchemeType.CKKS}\n     */\n    get CKKS() {\n      /**\n       * @typedef {SchemeType.CKKS} SchemeType.CKKS\n       */\n      return _CKKS\n    }\n  }\n}\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor = (library: Library): SecretKeyDependencies => ({\n  Exception,\n  ComprModeType,\n  Vector\n}: SecretKeyDependencyOptions): SecretKeyConstructorOptions => (): SecretKey => {\n  const Constructor = library.SecretKey\n  let _instance = new Constructor()\n\n  /**\n   * @implements SecretKey\n   */\n\n  /**\n   * @interface SecretKey\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name SecretKey#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance\n     *\n     * @private\n     * @function\n     * @name SecretKey#inject\n     * @param {Instance} instance WASM instance\n     */\n    inject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = new Constructor(instance)\n      instance.delete()\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name SecretKey#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Save the Encryption Parameters to a base64 string\n     *\n     * @function\n     * @name SecretKey#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      try {\n        return _instance.saveToString(compression)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save the SecretKey as a binary Uint8Array\n     *\n     * @function\n     * @name SecretKey#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    },\n\n    /**\n     * Load a SecretKey from a base64 string\n     *\n     * @function\n     * @name SecretKey#load\n     * @param {Context} context Encryption context to enforce\n     * @param {string} encoded Base64 encoded string\n     */\n    load(context: Context, encoded: string) {\n      try {\n        _instance.loadFromString(context.instance, encoded)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Load a SecretKey from an Uint8Array holding binary data\n     *\n     * @function\n     * @name SecretKey#loadArray\n     * @param {Context} context Encryption context to enforce\n     * @param {Uint8Array} array TypedArray containing binary data\n     */\n    loadArray(context: Context, array: Uint8Array) {\n      try {\n        _instance.loadFromArray(context.instance, array)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy an existing SecretKey and overwrite this instance\n     *\n     * @function\n     * @name SecretKey#copy\n     * @param {SecretKey} key SecretKey to copy\n     * @example\n     * const keyA = keyGenerator.secretKey()\n     * const keyB = seal.SecretKey()\n     * keyB.copy(keyA)\n     * // keyB holds a copy of keyA\n     */\n    copy(key: SecretKey) {\n      try {\n        _instance.copy(key.instance)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Clone and return a new instance of this SecretKey\n     *\n     * @function\n     * @name SecretKey#clone\n     * @returns {SecretKey}\n     * @example\n     * const keyA = keyGenerator.secretKey()\n     * const keyB = keyA.clone()\n     * // keyB holds a copy of keyA\n     */\n    clone(): SecretKey {\n      try {\n        const clonedInstance = _instance.clone()\n        const key = SecretKeyConstructor(library)({\n          Exception,\n          ComprModeType,\n          Vector\n        })()\n        key.inject(clonedInstance)\n        return key\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Move a SecretKey into this one and delete the old reference\n     *\n     * @function\n     * @name SecretKey#move\n     * @param {SecretKey} key SecretKey to move\n     * @example\n     * const keyA = keyGenerator.secretKey()\n     * const keyB = seal.SecretKey()\n     * keyB.move(keyA)\n     * // keyB holds a the instance of keyA.\n     * // keyA no longer holds an instance\n     */\n    move(key: SecretKey) {\n      try {\n        _instance.move(key.instance)\n        // TODO: find optimization\n        // This method results in a copy instead of a real move.\n        // Therefore, we need to delete the old instance.\n        key.delete()\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    }\n  }\n}\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor = (\n  library: Library\n): SecurityLevelDependencies => (): SecurityLevelConstructorOptions => (): SecurityLevel => {\n  // Static methods\n  const _none = library.SecLevelType.none\n  const _tc128 = library.SecLevelType.tc128\n  const _tc192 = library.SecLevelType.tc192\n  const _tc256 = library.SecLevelType.tc256\n\n  /**\n   * @implements SecurityLevel\n   */\n\n  /**\n   * @interface SecurityLevel\n   */\n  return {\n    /**\n     * Returns the 'none' security level\n     *\n     * @readonly\n     * @name SecurityLevel.none\n     * @type {SecurityLevel.none}\n     */\n    get none() {\n      /**\n       * @typedef {SecurityLevel.none} SecurityLevel.none\n       */\n      return _none\n    },\n\n    /**\n     * Returns the '128' security level\n     *\n     * @readonly\n     * @name SecurityLevel.tc128\n     * @type {SecurityLevel.tc128}\n     */\n    get tc128() {\n      /**\n       * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n       */\n      return _tc128\n    },\n\n    /**\n     * Returns the '192' security level\n     *\n     * @readonly\n     * @name SecurityLevel.tc192\n     * @type {SecurityLevel.tc192}\n     */\n    get tc192() {\n      /**\n       * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n       */\n      return _tc192\n    },\n\n    /**\n     * Returns the '256' security level\n     *\n     * @readonly\n     * @name SecurityLevel.tc256\n     * @type {SecurityLevel.tc256}\n     */\n    get tc256() {\n      /**\n       * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n       */\n      return _tc256\n    }\n  }\n}\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor = (library: Library): VectorDependencies => ({\n  Exception\n}: VectorDependencyOptions): VectorConstructorOptions => (): Vector => {\n  // Static methods\n  const _vecFromArrayUint8 = library.vecFromArrayUint8\n  const _vecFromArrayUint32 = library.vecFromArrayUint32\n  const _vecFromArrayInt32 = library.vecFromArrayInt32\n  const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n  const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n  const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n  const _vecFromArrayModulus = library.vecFromArrayModulus\n  const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n  const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n  const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n  const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n  const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n  const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n  const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n  let _instance: Instance\n  let _type: StringTypes\n  /**\n   * @implements Vector\n   */\n\n  /**\n   * @interface Vector\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Vector#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Vector#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Vector#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Converts a JS TypedArray into a vector\n     *\n     * @function\n     * @name Vector#from\n     * @param {VectorTypes} array The TypedArray to convert\n     * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n     */\n    from(array: VectorTypes, type?: StringTypes) {\n      try {\n        _type = type ? type : (array.constructor.name as StringTypes)\n        switch (_type) {\n          case 'Uint8Array':\n            _instance = _vecFromArrayUint8(array)\n            break\n          case 'Int32Array':\n            _instance = _vecFromArrayInt32(array)\n            break\n          case 'Uint32Array':\n            _instance = _vecFromArrayUint32(array)\n            break\n          case 'Float64Array':\n            _instance = _vecFromArrayFloat64(array)\n            break\n          case 'BigInt64Array':\n            _instance = _vecFromArrayBigInt64(array.toString().split(','))\n            break\n          case 'BigUint64Array':\n            _instance = _vecFromArrayBigUint64(array.toString().split(','))\n            break\n          case 'Modulus':\n            _instance = _vecFromArrayModulus(array.toString().split(','))\n            break\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * The Vector type\n     *\n     * @readonly\n     * @name Vector#type\n     */\n    get type(): StringTypes {\n      return _type\n    },\n\n    /**\n     * Set the Vector type\n     *\n     * @function\n     * @name Vector#setType\n     * @param {StringTypes} type the type of the vector\n     */\n    setType(type: StringTypes) {\n      _type = type\n    },\n\n    /**\n     * The vector size\n     *\n     * @readonly\n     * @name Vector#size\n     * @type {number}\n     */\n    get size(): number {\n      return _instance.size()\n    },\n\n    /**\n     * Get a value pointed to by the specified index\n     *\n     * @function\n     * @name Vector#getValue\n     * @param {number} index Index of the Vector\n     * @returns {number} Value of the element in the Vector pointed to by the index\n     */\n    getValue(index: number): number {\n      try {\n        return _instance.get(index)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Resizes a vector to the given size\n     *\n     * @function\n     * @name Vector#resize\n     * @param {number} size number of elements to resize\n     * @param {number} fill Data to fill the vector with\n     */\n    resize(size: number, fill: number) {\n      try {\n        _instance.resize(size, fill)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Copy a vector's data into a Typed Array\n     *\n     * Note: we cannot simply return a view on the underlying ArrayBuffer\n     * because WASM memory can grow and cause all the views to become\n     * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n     *\n     * @function\n     * @name Vector#toArray\n     * @returns {VectorTypes} TypedArray containing values from the Vector\n     */\n    toArray(): VectorTypes {\n      if (!_instance) {\n        throw new Error(INSTANCE_DELETED)\n      }\n      switch (_type) {\n        case 'Uint8Array':\n          return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n        case 'Int32Array':\n          return Int32Array.from(_jsArrayInt32FromVec(_instance))\n        case 'Uint32Array':\n          return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n        case 'Float64Array':\n          return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n        case 'BigInt64Array':\n          return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n        case 'BigUint64Array':\n          return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n        case 'Modulus':\n          return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n        default:\n          throw new Error(UNSUPPORTED_VECTOR_TYPE)\n      }\n    }\n  }\n}\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_allows_wasm_web'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { IntegerEncoderInit } from '../implementation/integer-encoder'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    IntegerEncoder: IntegerEncoderInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  IntegerEncoderConstructorOptions,\n  IntegerEncoderDependencies\n} from './integer-encoder'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly IntegerEncoder: IntegerEncoderConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly IntegerEncoder: IntegerEncoderDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  IntegerEncoder,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const integerEncoder = IntegerEncoder({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    IntegerEncoder: integerEncoder,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector\n  }\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor = (): EncryptionParameterQualifiersDependencies => (): EncryptionParameterQualifiersConstructorOptions => (): EncryptionParameterQualifiers => {\n  let _instance: Instance\n  /**\n   * @implements EncryptionParameterQualifiers\n   */\n\n  /**\n   * @interface EncryptionParameterQualifiers\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name EncryptionParameterQualifiers#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name EncryptionParameterQualifiers#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name EncryptionParameterQualifiers#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * If the encryption parameters are set in a way that is considered valid by\n     * Microsoft SEAL, the variable parameters_set is set to true.\n     *\n     * @function\n     * @name EncryptionParameterQualifiers#parametersSet\n     * @type {boolean}\n     */\n    parametersSet() {\n      return _instance.parametersSet()\n    },\n\n    /**\n     * Tells whether FFT can be used for polynomial multiplication. If the\n     * polynomial modulus is of the form X^N+1, where N is a power of two, then\n     * FFT can be used for fast multiplication of polynomials modulo the polynomial\n     * modulus. In this case the variable using_fft will be set to true. However,\n     * currently Microsoft SEAL requires this to be the case for the parameters\n     * to be valid. Therefore, parameters_set can only be true if using_fft is\n     * true.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#usingFFT\n     * @type {boolean}\n     */\n    get usingFFT() {\n      return _instance.usingFFT\n    },\n\n    /**\n     * Tells whether NTT can be used for polynomial multiplication. If the primes\n     * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n     * polynomial modulus and N is a power of two, then the number-theoretic\n     * transform (NTT) can be used for fast multiplications of polynomials modulo\n     * the polynomial modulus and coefficient modulus. In this case the variable\n     * using_ntt will be set to true. However, currently Microsoft SEAL requires\n     * this to be the case for the parameters to be valid. Therefore, parameters_set\n     * can only be true if using_ntt is true.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#usingNTT\n     * @type {boolean}\n     */\n    get usingNTT() {\n      return _instance.usingNTT\n    },\n\n    /**\n     * Tells whether batching is supported by the encryption parameters. If the\n     * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n     * modulus and N is a power of two, then it is possible to use the BatchEncoder\n     * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n     * the plaintext modulus. This is called batching, and allows the user to\n     * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n     * matrix rows and columns. When the computation is easily vectorizable, using\n     * batching can yield a huge performance boost. If the encryption parameters\n     * support batching, the variable using_batching is set to true.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#usingBatching\n     * @type {boolean}\n     */\n    get usingBatching() {\n      return _instance.usingBatching\n    },\n\n    /**\n     * Tells whether fast plain lift is supported by the encryption parameters.\n     * A certain performance optimization in multiplication of a ciphertext by\n     * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n     * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n     * plaintext modulus is smaller than each prime in the coefficient modulus.\n     * In this case the variable using_fast_plain_lift is set to true.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#usingFastPlainLift\n     * @type {boolean}\n     */\n    get usingFastPlainLift() {\n      return _instance.usingFastPlainLift\n    },\n\n    /**\n     * Tells whether the coefficient modulus consists of a set of primes that\n     * are in decreasing order. If this is true, certain modular reductions in\n     * base conversion can be omitted, improving performance.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n     * @type {boolean}\n     */\n    get usingDescendingModulusChain() {\n      return _instance.usingDescendingModulusChain\n    },\n\n    /**\n     * Tells whether the encryption parameters are secure based on the standard\n     * parameters from HomomorphicEncryption.org security standard.\n     *\n     * @readonly\n     * @name EncryptionParameterQualifiers#securityLevel\n     * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n     */\n    get securityLevel() {\n      return _instance.securityLevel\n    }\n  }\n}\n\nexport const EncryptionParameterQualifiersInit = (): EncryptionParameterQualifiersDependencies => {\n  return EncryptionParameterQualifiersConstructor()\n}\n","import { Instance } from './seal'\nimport { Exception } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor = (): SerializableDependencies => ({\n  Exception,\n  Vector,\n  ComprModeType\n}: SerializableDependencyOptions): SerializableConstructorOptions => (): Serializable => {\n  let _instance: Instance\n\n  /**\n   * @implements Serializable\n   */\n\n  /**\n   * @interface Serializable\n   */\n  return {\n    /**\n     * Get the underlying WASM instance\n     *\n     * @private\n     * @readonly\n     * @name Serializable#instance\n     * @type {Instance}\n     */\n    get instance() {\n      return _instance\n    },\n\n    /**\n     * Inject this object with a raw WASM instance. No type checking is performed.\n     *\n     * @private\n     * @function\n     * @name Serializable#unsafeInject\n     * @param {Instance} instance WASM instance\n     */\n    unsafeInject(instance: Instance) {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n      _instance = instance\n    },\n\n    /**\n     * Delete the underlying WASM instance.\n     *\n     * Should be called before dereferencing this object to prevent the\n     * WASM heap from growing indefinitely.\n     * @function\n     * @name Serializable#delete\n     */\n    delete() {\n      if (_instance) {\n        _instance.delete()\n        _instance = undefined\n      }\n    },\n\n    /**\n     * Save to a base64 string\n     *\n     * @function\n     * @name Serializable#save\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {string} Base64 encoded string\n     */\n    save(compression: ComprModeType = ComprModeType.deflate): string {\n      try {\n        return _instance.saveToString(compression)\n      } catch (e) {\n        throw Exception.safe(e)\n      }\n    },\n\n    /**\n     * Save as a binary Uint8Array\n     *\n     * @function\n     * @name Serializable#saveArray\n     * @param {ComprModeType} [compression={@link ComprModeType.deflate}] The compression mode to use\n     * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n     */\n    saveArray(compression: ComprModeType = ComprModeType.deflate): Uint8Array {\n      const tempVect = Vector()\n      const instance = _instance.saveToArray(compression)\n      tempVect.unsafeInject(instance)\n      tempVect.setType('Uint8Array')\n      const tempArr = tempVect.toArray() as Uint8Array\n      tempVect.delete()\n      return tempArr\n    }\n  }\n}\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","h","aa","ba","ready","Promise","a","b","u","ca","hasOwnProperty","fa","ha","da","ea","window","importScripts","ia","w","self","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","c","ja","ka","noExitRuntime","x","printErr","console","warn","bind","thisProgram","quit","wasmBinary","WebAssembly","y","A","la","ma","na","TextDecoder","pa","B","d","subarray","decode","e","f","String","fromCharCode","l","qa","length","charCodeAt","ra","E","F","C","ua","D","G","Aa","Ba","sa","ta","va","wa","xa","ya","za","Ca","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Da","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","buffer","byteLength","Ea","Fa","Ga","Ha","Ia","preRun","shift","unshift","H","Ka","onAbort","RuntimeError","La","prototype","startsWith","preloadedImages","preloadedAudios","Ma","I","Na","locateFile","Oa","Qa","get","Ra","this","Ua","Sa","Ta","TypeError","K","L","M","Va","Wa","replace","Xa","Function","Ya","Error","name","message","stack","toString","Object","create","constructor","N","O","Za","$a","Q","k","m","R","forEach","Array","push","Ja","ab","count","ga","bb","$","cb","db","eb","value","fb","FinalizationGroup","next","done","unregister","register","gb","hb","ib","pop","S","jb","kb","arguments","apply","lb","mb","nb","ob","T","pb","clone","Pa","U","qb","rb","fromWireType","sb","tb","vb","V","n","p","toWireType","wb","W","concat","call","xb","yb","zb","Ab","X","Y","map","join","Bb","Cb","Db","r","split","Eb","Fb","Gb","Z","Hb","Ib","Jb","Kb","Mb","Nb","Ob","Pb","Qb","Vb","Rb","Tb","Ub","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","Yb","Zb","$b","ac","bc","Date","getTime","getMonth","getFullYear","getDate","setDate","setMonth","setFullYear","cc","g","q","v","J","z","getDay","oa","%c","%D","%F","%h","%r","%R","%T","%x","%X","%Ec","%EC","%Ex","%EX","%Ey","%EY","%Od","%Oe","%OH","%OI","%Om","%OM","%OS","%Ou","%OU","%OV","%Ow","%OW","%Oy","RegExp","t","%a","substring","%A","%b","%B","%C","%d","%e","%g","%G","%H","%I","%j","%m","%M","%n","%p","%S","%t","%u","%U","Math","ceil","%V","%w","%W","%y","%Y","%z","abs","slice","%Z","%%","dc","set","ec","fc","BindingError","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","argPackAdvance","readValueFromPointer","deleteObject","ub","pointerType","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","UnboundTypeError","count_emval_handles","get_first_emval","gc","atob","charAt","hc","jc","ic","P","Lb","enumerable","configurable","defineProperty","className","values","s","ArrayBuffer","Uint8ClampedArray","j","o","Sb","i","copyWithin","min","max","grow","Xb","crypto","getRandomValues","Wb","asm","exports","monitorRunDependencies","instance","fetch","resolve","then","credentials","ok","arrayBuffer","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_main","___getTypeName","___embind_register_native_and_builtin_types","kc","_malloc","_free","lc","status","nc","calledRun","onRuntimeInitialized","oc","onExit","postRun","setStatus","setTimeout","dynCall_vij","dynCall_iiiiiijj","dynCall_iiiiij","dynCall_iiiiijj","dynCall_viijii","dynCall_viij","mc","run","preInit","noInitialRun","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","[object Object]","delete","array","plainText","encode","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","unsafeInject","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","capacity","reserve","size","resize","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","deflate","saveToString","saveToArray","encoded","loadFromString","loadFromArray","cipher","copy","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_deflate","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","cipherText","decrypt","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","coeffModulus","setCoeffModulus","plainModulus","setPlainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSymmetric","serialized","encryptSymmetricSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","encrypted","destination","negate","temp","add","sub","multiply","square","relinKeys","relinearize","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","exponent","exponentiate","addPlain","subPlain","multiplyPlain","destinationNtt","plainTransformToNtt","cipherTransformToNtt","encryptedNtt","cipherTransformFromNtt","galoisElt","galoisKeys","applyGalois","steps","rotateRows","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","EvaluatorConstructor","ExceptionInit","_getException","getException","error","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","relinKeysLocal","galoisKeysLocal","KeyGeneratorConstructor","IntegerEncoderInit","IntegerEncoder","encodeInt32","tempPlain","encodeUint32","IntegerEncoderConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_BFV","BFV","_CKKS","CKKS","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","integerEncoder","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}